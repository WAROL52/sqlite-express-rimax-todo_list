{"version":3,"file":"rimax.global.min.js","sources":["../../rimax/hooks/useState.js","../../rimax/hooks/useRef.js","../../rimax/hooks/useProps.js","../../rimax/hooks/useEvent.js","../../rimax/hooks/useMemo.js","../../rimax/core/RgExp.js","../../rimax/core/templateRef.js","../../rimax/core/RxFiber/FiberOfNode.js","../../rimax/core/RxFiber/FiberOfElement.js","../../rimax/core/RxFiber/FiberOfFragment.js","../../rimax/core/RxFiber/FiberOfText.js","../../rimax/core/core.js","../../rimax/core/RcHtmlString/HtmlStringParser.js","../../rimax/core/RcHtmlString/RcHtmlString.js","../../rimax/index.js","../../rimax/core/component.js","../../rimax/core/customeElement.js","../../rimax/hooks/useEffect.js","../../rimax/hooks/useLayoutEffect.js"],"sourcesContent":["const guardFn = v => v\r\nconst stateSymbol = Symbol(\"$$State\")\r\nconst isState = ((ref) => (typeof ref == \"object\") && stateSymbol === ref[\".rxType\"]).bind()\r\nexport class RXState {\r\n    get isArray() { return Array.isArray(this.value) }\r\n    toString() { return String(this.value) }\r\n    valueOf() { return this.value }\r\n    get [\".rxType\"]() { return stateSymbol }\r\n    static isState = isState\r\n}\r\nfunction createState(value, guard) {\r\n    let currentValueOfState\r\n    let oldValueOfState\r\n    let isDestroyed = false\r\n    let subscriber=0\r\n    const ID = Math.random()\r\n    const GUARDS = []\r\n    const DESTROY_EVENTS = new Set()\r\n    const UPDATE_EVENTS = new Set()\r\n    const ACTIONS={}\r\n    const dispatchUpdate = (option) => { UPDATE_EVENTS.forEach(fn =>fn(currentValueOfState, oldValueOfState, option)) }\r\n    \r\n    return Object.freeze(new (class rxState extends RXState {\r\n        get guards() { return [...GUARDS] }\r\n        get isDestroyed() { return isDestroyed }\r\n        get id() { return ID }\r\n        get len() { return {onChange:UPDATE_EVENTS.size,onCleanup:DESTROY_EVENTS.size,subscriber} }\r\n        addGuard(guard) {\r\n            if (!(guard instanceof Function)) return () => undefined\r\n            const callback = (...a) => guard(...a)\r\n            const lastIndex = GUARDS.push(callback) - 1\r\n            let isRemoved = false\r\n            return () => {\r\n                if (isRemoved) return true\r\n                if (GUARDS[lastIndex] === callback) {\r\n                    GUARDS.splice(lastIndex, 1)\r\n                    isRemoved = true\r\n                    return true\r\n                }\r\n                const i = GUARDS.find(fn => fn === callback)\r\n                if (i > -1) {\r\n                    GUARDS.splice(i, 1)\r\n                    return true\r\n                }\r\n                return false\r\n            }\r\n        }\r\n\r\n        clear(withDom = false) {\r\n            DESTROY_EVENTS.forEach(fn => fn(withDom))\r\n            DESTROY_EVENTS.clear()\r\n            UPDATE_EVENTS.clear()\r\n        }\r\n        destroy(withDom = true) {\r\n            if (isDestroyed) return;\r\n            this.clear(withDom)\r\n            isDestroyed = true\r\n        }\r\n\r\n        onChange = ((callbackOrState, directApply = false) => {\r\n            if (callbackOrState instanceof RXState) {\r\n                const callback = directApply instanceof Function ? directApply : v => v\r\n                const state=callbackOrState\r\n                subscriber++\r\n                let isRemoved\r\n                return this.onChange((...args) =>{\r\n                    state.set(() => callback(...args), ...args.slice(1))\r\n                    return ()=>{\r\n                        if(isRemoved) return\r\n                        isRemoved=true\r\n                        subscriber--\r\n                    }\r\n                }, true)\r\n            }\r\n            if (!(callbackOrState instanceof Function)) throw new Error(\"callback doit être une fonction\")\r\n            const on = {\r\n                dispatch: callbackOrState, destroy: directApply ? callbackOrState(this.value, undefined, { methode: \"set\", value: this.value }) : undefined\r\n            }\r\n            const onDispatch = (...arg) => on.destroy = on.dispatch(...arg)\r\n            let isCalled = false\r\n            const destroy = (...arg) => {\r\n                if (isCalled) return\r\n                isCalled = true\r\n                if (on.destroy instanceof Function) on.destroy(...arg);\r\n                DESTROY_EVENTS.delete(destroy)\r\n                UPDATE_EVENTS.delete(onDispatch)\r\n            }\r\n            UPDATE_EVENTS.add(onDispatch)\r\n            DESTROY_EVENTS.add(destroy)\r\n            return destroy\r\n        }).bind()\r\n        onCleanup = ((callback) => {\r\n            if (!(callback instanceof Function)) throw new Error(\"callback doit être une fonction\")\r\n            const fn=(...args)=>callback(...args)\r\n            DESTROY_EVENTS.add(fn)\r\n            return () => DESTROY_EVENTS.delete(callback)\r\n        }).bind()\r\n\r\n\r\n        get oldValue() { return oldValueOfState }\r\n\r\n        constructor(value, guard = v => v) {\r\n            super()\r\n            Object.defineProperty(this, \"value\", {\r\n                get: (() => currentValueOfState).bind(),\r\n                set: ((value) => this.set(value)).bind(),\r\n                enumerable: true,\r\n            })\r\n            if(guard&& typeof guard ==\"object\"){\r\n                Object.assign(ACTIONS,guard.actions??{})\r\n                guard=guard.guard??(v => v)\r\n            }\r\n            if (!(guard instanceof Function)) throw new Error(\"guard doit être une fonction\")\r\n            currentValueOfState = value\r\n            GUARDS.push(guard)\r\n            const toValidate = (value, oldValue = oldValueOfState, option = {}) => {\r\n                const oldValues = []\r\n                return GUARDS.reduceRight((val, guardFn) => {\r\n                    oldValues.push(val)\r\n                    return guardFn(val, oldValue, option, [...oldValues])\r\n                }, value)\r\n            }\r\n            if (!(value instanceof Promise)) {\r\n                currentValueOfState = toValidate(value, undefined, {})\r\n            }\r\n            const createStateComputed = (callback = () => currentValueOfState, dependencies = [], guard = v => v) => {\r\n                if (!(callback instanceof Function)) throw new Error(\"callback doit être une function\")\r\n                if (isDestroyed) throw new Error(\"cette Etat ne peut plus etre utiliser car elle est deja detruit\")\r\n                const optDependencies=(dependencies&&!Array.isArray(dependencies)&&typeof dependencies==\"object\")?dependencies:{}\r\n                dependencies=Array.isArray(dependencies)?dependencies:optDependencies.dependencies??[]\r\n                if (!Array.isArray(dependencies)) throw new Error(\"dependencies doit être une Array\")\r\n                const update = (option = {}) => callback(currentValueOfState, oldValueOfState, option)\r\n                const optionState={guard,...optDependencies}\r\n                const [state, setState] = useState(update(), optionState)\r\n                if(optionState.guard!==guard)state.addGuard(guard);\r\n                const states = [this, ...dependencies]\r\n                const listrmv = states.map(st => {\r\n                    if (st instanceof RXState) {\r\n                        return st.onChange((_1, _2, option) => {\r\n                            setState(update(option), option)\r\n                            return () => !state.isDestroyed && state.destroy(true)\r\n                        })\r\n                    }\r\n                })\r\n                state.onCleanup(() => listrmv.map(fn => fn instanceof Function && fn()))\r\n                return state\r\n            }\r\n            this.get = ((callback = () => this.value, dependencies = []) => createStateComputed(callback, dependencies)).bind()\r\n            Object.entries(stateType).map(([type, fnGuard]) => this.get[type] = (callback = () => this.value, dependencies = []) => createStateComputed(callback, dependencies, fnGuard))\r\n            this.set = ((value, option = { methode: \"set\", value: value }) => {\r\n                if (isDestroyed) throw new Error(\"cette Etat ne peut plus etre utiliser car elle est deja detruit\")\r\n                if (typeof option != \"object\") throw new Error(\"option doit être un object\")\r\n                if (value instanceof Promise) {\r\n                    return value.then(v => this.set(v))\r\n                }\r\n                if (value instanceof RXState) value = value.value;\r\n                if (value instanceof Function) value = value(currentValueOfState, oldValueOfState)\r\n                const _oldValue = currentValueOfState\r\n                if (_oldValue !== value) {\r\n                    value = toValidate(value, _oldValue, option);\r\n                    oldValueOfState = _oldValue\r\n                    currentValueOfState = value\r\n                    dispatchUpdate(option)\r\n                }\r\n                return currentValueOfState\r\n            }).bind()\r\n            insertArrayMethode(this, { createStateComputed })\r\n            Object.entries(ACTIONS).map(([k,v])=>this.set[k]=payload=>this.set(v instanceof Function ?v(currentValueOfState,payload):v))\r\n            if (value instanceof Promise) {\r\n                value.then(v => this.set(v))\r\n            }\r\n        }\r\n\r\n    })(value, guard))\r\n}\r\nconst stateType = {\r\n    array(v) {\r\n        if (!Array.isArray(v)) throw new Error(\"cette state doit être de type Array\")\r\n        return v\r\n    },\r\n    number(v) {\r\n        if (typeof v != \"number\") throw new Error(\"cette state doit être de type Number\")\r\n        return v\r\n    },\r\n    string(v) {\r\n        if (typeof v != \"string\") throw new Error(\"cette state doit être de type string\")\r\n        return v\r\n    },\r\n    function(v) {\r\n        if (typeof v != \"function\") throw new Error(\"cette state doit être de type function\")\r\n        return v\r\n    },\r\n    boolean(v) {\r\n        if (typeof v != \"boolean\") throw new Error(\"cette state doit être de type boolean\")\r\n        return v\r\n    },\r\n    symbol(v) {\r\n        if (typeof v != \"symbol\") throw new Error(\"cette state doit être de type symbol\")\r\n        return v\r\n    },\r\n    object(v) {\r\n        if (typeof v != \"object\") throw new Error(\"cette state doit être de type object\")\r\n        return v\r\n    },\r\n}\r\nfunction insertArrayMethode(stateInstace, { createStateComputed }) {\r\n    const state = stateInstace\r\n    const isArray = () => {\r\n        if (!state.isArray) throw new Error(\"pour pouvoir utiliser cette methode le type de state doit être une Array\")\r\n    }\r\n    const isFunction = (callback) => {\r\n        if (!(callback instanceof Function)) throw new Error(\"callback doit doit être une function\")\r\n    }\r\n    const getIndex = (index) => {\r\n        if (index instanceof RXState) {\r\n            index = index.value\r\n        }\r\n        if (index instanceof Function) {\r\n            index = state.value.findIndex(index)\r\n        }\r\n        if (isNaN(index)) throw new Error(\"index doit être une nombre ou une fonction qui retourne un nombre\")\r\n        return index\r\n    }\r\n    state.get.map = (callback) => {\r\n        isFunction(callback)\r\n        const createState = (v, i) => [useState(v)[0], useState(i)[0]]\r\n        const rendMap = (v) => callback(...v, state)\r\n        const listState = state.value.map(createState)\r\n        let listElement = listState.map(rendMap)\r\n        const [items, setItems] = useState(listElement)\r\n        const update = () => listState.map(([v, i], index) => {\r\n            if (!i.isDestroyed) i.set(index);\r\n            if (!v.isDestroyed) v.set(state.value[index]);\r\n        })\r\n        state.onChange((val) => {\r\n            if (listState.length > val.length) {\r\n                const indexStart = val.length\r\n                const end = listState.length\r\n                listState.splice(indexStart, end).map(s => s.map(i => i.destroy(true)))\r\n                setItems.splice(indexStart, end)\r\n            } else if (listState.length < val.length) {\r\n                const indexStart = listState.length\r\n                listState.push(...val.slice(indexStart).map(createState))\r\n                listState.map(([, index], i) => index.set(i))\r\n                setItems.push(...listState.slice(indexStart).map(rendMap))\r\n            }\r\n            update()\r\n            // console.log(items.value);\r\n        })\r\n        return items\r\n    }\r\n    state.get.callback = (callback) => {\r\n        if (!(callback instanceof Function)) throw new Error(\"callback doit être une function\")\r\n        return state.get(() => callback)\r\n    }\r\n    const action = (args, action) => {\r\n        isArray()\r\n        if (state.value[action] instanceof Function) {\r\n            const returnValue = state.value[action](...args)\r\n            return state.set([...state.value], { methode: \"set\", action, args, returnValue })\r\n        }\r\n    }\r\n    // TODO: state.set.remove\r\n    // TODO: state.set.removeItem\r\n    // TODO: state.set.editItem\r\n    state.set.splice = (...args) => action([...args], \"splice\")\r\n    state.set.remove = (start, deleteCount = 1) => {\r\n        const returnValue = state.value.splice(start, deleteCount)\r\n        return state.set([...state.value], { methode: \"set\", action: \"remove\", args: [start, deleteCount], returnValue })\r\n    }\r\n    state.set.edit = (index, value) => {\r\n        isArray()\r\n        index = getIndex(index)\r\n        if (index > -1) {\r\n            if (value instanceof Function) {\r\n                value = value(state.value[index], index, state.value)\r\n            }\r\n            const returnValue = state.value.splice(index, 1, value)\r\n            return state.set([...state.value], { methode: \"set\", action: \"edit\", args: [index, value], returnValue })\r\n        }\r\n    }\r\n    state.set.push = (...items) => action([...items], \"push\")\r\n    state.set.pop = () => action([], \"pop\")\r\n    state.set.shift = () => action([], \"shift\")\r\n    state.set.unshift = (...items) => action([...items], \"shift\")\r\n    state.set.reverse = () => action([], \"reverse\")\r\n    state.set.fill = (...items) => action([...items], \"fill\")\r\n    state.set.filter = (predicate, ...args) => {\r\n        isArray()\r\n        isFunction(predicate)\r\n        const returnValue = state.value.filter(predicate, ...args)\r\n        return state.set(returnValue, { methode: \"set\", action: \"filter\", args: [predicate, ...args], returnValue })\r\n    }\r\n    state.set.slice = (...args) => {\r\n        isArray()\r\n        const returnValue = state.value.slice(...args)\r\n        return state.set(returnValue, { methode: \"set\", action: \"slice\", args, returnValue })\r\n    }\r\n    state.set.sort = (compareFn = (a, b) => b - a) => {\r\n        isArray()\r\n        isFunction(compareFn)\r\n        const oldValue = state.value.slice()\r\n        const returnValue = state.value.sort(compareFn)\r\n        if (returnValue.every((item, index) => item === oldValue[index])) return state.value\r\n        return state.set(returnValue, { methode: \"set\", action: \"sort\", args:arguments, returnValue })\r\n    }\r\n    state.set.map = (callbackfn, thisArg = state.value) => {\r\n        isArray()\r\n        isFunction(callbackfn)\r\n        const returnValue = state.value.map(callbackfn, ...args)\r\n        return state.set(returnValue, { methode: \"set\", action: \"map\", args, returnValue })\r\n    }\r\n}\r\n\r\nexport default function useState(value, guard = guardFn) {\r\n    if (value instanceof RXState) {\r\n        value = value\r\n        if (guard instanceof Function && guard !== guardFn) value.addGuard(guard);\r\n    } else if (Array.isArray(value) && value[0] instanceof RXState && value[1] === value[0].set) {\r\n        value = value[0]\r\n        if (guard instanceof Function && guard !== guardFn) value.addGuard(guard);\r\n    } else {\r\n        value = createState(value, guard)\r\n    }\r\n    return [value, value.set]\r\n}\r\n\r\n\r\nObject.entries(stateType).map(([type, guard]) => useState[type] = (value) => useState(value, guard))\r\nuseState.isState = isState","import useState from \"./useState.js\"\r\nconst refSymbol=Symbol(\"$$ref\")\r\nexport default function useRef(value) {\r\n    const [ref, changeRef] = useState(value)\r\n    const OBJECT=Object\r\n    return OBJECT.freeze(new (class Object {\r\n        constructor(){\r\n            OBJECT.defineProperty(this,\"current\",{\r\n                get:(()=>ref.value).bind(),\r\n                set:((val)=>changeRef(val)).bind(),\r\n                enumerable:true,\r\n                configurable:false\r\n            })\r\n            OBJECT.defineProperty(this,\"onChange\",{\r\n                value:((fn)=>ref.onChange(fn)).bind(),\r\n                enumerable:true,\r\n            })\r\n        }\r\n        onCleanup(fn){return ref.onCleanup(fn)}\r\n        destroy(fn){return ref.destroy(true)}\r\n        set(fn){return changeRef(fn)}\r\n        get [\".rxType\"](){return refSymbol}\r\n    }))\r\n}\r\nuseRef.isRef=((ref)=>(typeof ref==\"object\")&&refSymbol===ref[\".rxType\"]).bind()\r\n","import useState from \"./useState.js\";\r\n\r\nexport function useProps(props = {}) {\r\n    if(typeof props !=\"object\") throw new Error(\"props doit être une object\")\r\n    return {\r\n        ...Object.entries(props).reduce((prop, [key, value]) => ({ ...prop, [key]: (key === \"children\" || key.startsWith(\"$\"))? value :useState.isState(value) ?value : useState(value)[0] }), {})\r\n    }\r\n}","const handlerEvent = {\r\n    beforeDispatch: (...args) => [...args],\r\n    afterDispatch: (data, returnValue) => [data, returnValue],\r\n    onSubscribe: callback => callback,\r\n    clearAfterEachDispatch:false\r\n}\r\nexport function useEvent(handler = handlerEvent) {\r\n    if (typeof handler !== \"object\") throw new Error(\"handler doit être un object\")\r\n    const { beforeDispatch=handlerEvent.beforeDispatch, afterDispatch=handlerEvent.afterDispatch, onSubscribe=handlerEvent.onSubscribe,clearAfterEachDispatch=handlerEvent.clearAfterEachDispatch} = handler\r\n    const EVENTS = new Set()\r\n    const subscribe = (callback) => {\r\n        if (!(callback instanceof Function)) throw new Error(\"callback doit être un function\")\r\n        callback = onSubscribe(callback)\r\n        if (callback instanceof Function) EVENTS.add(callback)\r\n        return () => EVENTS.delete(callback)\r\n    }\r\n    return [subscribe, (data,...rest) => {\r\n        const args = beforeDispatch(data,...rest)\r\n        const returnValue = EVENTS.forEach(fn => fn?.(...(Array.isArray(args)?args:[args])))\r\n        if(clearAfterEachDispatch)EVENTS.clear();\r\n        return afterDispatch(data, returnValue)\r\n    }]\r\n}","import useState, { RXState } from \"./useState.js\"\r\n\r\nexport function useMemo(callback, states = []) {\r\n    if (!Array.isArray(states)) throw new Error(\"states doit être une Array\")\r\n    const listRmv = []\r\n    const [state,setState]=useState()\r\n    const array = [...states]\r\n    const getValue = s => s instanceof RXState ? s.value : s\r\n    const update=i=> setState(callback([...array.map(getValue)],i))\r\n    array.forEach((st, i) => {\r\n        if (st instanceof RXState) {\r\n            listRmv.push(st.onChange(() => {update(i)}))\r\n        }\r\n    })\r\n    update(-1)\r\n    state.onCleanup(()=>listRmv.splice(0,listRmv.length).map(fn => fn?.()))\r\n    return state\r\n}","\r\nexport function createRegExp(...regs){\r\n    return regs.reduce((regFinal,reg)=>new RegExp(regFinal.source+reg.source))\r\n}\r\nfunction getRegSource(reg){\r\n    return typeof reg==\"string\"?reg:reg.source\r\n}\r\nexport function combineRegExp(...regs){\r\n    return regs.reduce((regFinal,reg)=>new RegExp(regFinal.source+getRegSource(reg)))\r\n}\r\nexport function combineAndSaveRegExp(...regs){\r\n    return new RegExp(`(${combineRegExp(...regs).source})`)\r\n}\r\nexport function combineAndNoSaveRegExp(...regs){\r\n    return new RegExp(`(?:${combineRegExp(...regs).source})`)\r\n}\r\nexport function createRegExpSaved(...regs){\r\n    return new RegExp(`(${createRegExp(...regs).source})`)\r\n}\r\nexport function createRegExpSplit(...regs){\r\n    return createRegExpSaved(regs.reduce((regFinal,reg)=>new RegExp(regFinal.source+\"|\"+reg.source)))\r\n}","import { createRegExpSplit } from \"./RgExp.js\"\r\n\r\nexport class TemplateRef extends Array {\r\n    static get regExp() { return /\\(_\\|-\\[RXRefs\\{index:\\d+,type:[\\w\\$]+\\}\\]-\\|_\\)/ }\r\n    static get regExpSaved() { return /\\(_\\|-\\[RXRefs\\{index:(?<index>\\d+),type:(?<type>[\\w\\$]+)\\}\\]-\\|_\\)/ }\r\n    static get regExpSavedG() { return /\\(_\\|-\\[RXRefs\\{index:(?<index>\\d+),type:(?<type>[\\w\\$]+)\\}\\]-\\|_\\)/g }\r\n    static {\r\n        this.split = function (chaine = \"\", includeResults = true) {\r\n            if (typeof chaine != \"string\") throw new Error(\"chaine doit etre une chaine de caractere\")\r\n            const reg = includeResults ? createRegExpSplit(this.regExp) : this.regExp\r\n            const result = chaine.split(reg).reduce((l, item) => {\r\n                if (!item) return l\r\n                const r = this.parse(item)\r\n                if (r && includeResults instanceof Function) item = includeResults(r)\r\n                l.push(item)\r\n                return l\r\n            }, [])\r\n            return result\r\n        }\r\n        this.replaceAll = function (chaine, value = \"\") {\r\n            if (typeof chaine != \"string\") throw new Error(\"chaine doit etre une chaine de caractere\")\r\n            return chaine.replaceAll(this.regExpSavedG, (input, index, type) => value instanceof Function ? value({ input, index, type }) : value)\r\n        }\r\n        this.parse = function (chaine = \"\", refs = null) {\r\n            if (typeof chaine != \"string\") throw new Error(\"chaine doit etre une chaine de caractere\")\r\n            const result = /\\(_\\|-\\[RXRefs\\{index:(?<index>\\d+),type:(?<type>[\\w\\$]+)\\}\\]-\\|_\\)/.exec(chaine)\r\n            const value = refs ? this.split(chaine, ({ index }) => refs[index]) : null\r\n            const valueString = value ? value.join('') : \"\"\r\n            return result ? {\r\n                index: result.groups.index,\r\n                type: result.groups.type,\r\n                input: result.input,\r\n                value, valueString, refs\r\n            } : null\r\n        }\r\n    }\r\n    constructor(...refs) {\r\n        super()\r\n        this.push(...refs)\r\n        this.components={}\r\n    }\r\n}","import { useState, RXState, useLayoutEffect, useMemo, useRef } from \"../../hooks/indexHooks.js\"\r\nimport { TemplateRef } from \"../templateRef.js\"\r\n\r\nconst customeElementRegistry = {}\r\n\r\nconst regExpDirective = /^(?<directiveName>(?:[A-z][\\w\\-]*:)|@|#)(?<arg>[\\w-]*)(?<modifiers>\\[[\\w\\-,]*\\])?$/\r\nconst directiveOption = {\r\n    el: null,\r\n    attrName: \"\",\r\n    attrValue: \"\",\r\n    directiveName: \"\",\r\n    arg: \"\",\r\n    modifiers: {},\r\n    index: 0\r\n}\r\nexport class FiberOfNode {\r\n    #components = ({ ...customeElementRegistry })\r\n    get components() { return this.#components }\r\n    set components(components) {\r\n        Object.assign(this.#components, components)\r\n    }\r\n    refs = new TemplateRef()\r\n    directives = {\r\n        $onInit({ attrValue, el} = directiveOption){\r\n            attrValue=attrValue instanceof RXState?attrValue.value:attrValue\r\n            if(attrValue instanceof Function){\r\n                el.onCleanup=attrValue(el)\r\n                return\r\n            }\r\n            console.warn(\"$onInit.attrValue doit être de type Function\")\r\n        },\r\n        $shadowRoot({ attrValue, el, arg } = directiveOption) {\r\n            const elementsCanAttachShadowRoot = [\"article\", \"aside\", \"blockquote\", \"body\", \"div\", \"footer\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"main\", \"nav\", \"p\", \"section\", \"span\"]\r\n            if (elementsCanAttachShadowRoot.includes(el.localName) || el.localName.includes(\"-\")) {\r\n                let callback\r\n                if (attrValue instanceof RXState) attrValue = attrValue.value\r\n                if (attrValue instanceof Function) callback = attrValue\r\n                const oldChildren = [...el.childNodes]\r\n                const root = el.attachShadow({ mode: arg === \"closed\" ? \"closed\" : \"open\" })\r\n                const returnValue = callback instanceof Function ? callback({ el, root, children: oldChildren }) : oldChildren\r\n                const children = Array.isArray(returnValue) ? returnValue : [returnValue]\r\n                el.innerHTML = \"\"\r\n                root.append(...children)\r\n            } else {\r\n                console.warn(`l'element ${el.localName} ne suporte pas le attachShadow. Seule les element personnalisé (balise avec un tiré) et quelque element native le supporte,\r\n                voici une liste d'element qui le support:`, elementsCanAttachShadowRoot);\r\n            }\r\n        },\r\n        $attrState({ attrValue, el, setAttribute } = directiveOption) {\r\n            let cleanup\r\n            if (attrValue instanceof RXState) {\r\n                const update = (name, value) => {\r\n                    if (cleanup instanceof Function) cleanup();\r\n                    cleanup = setAttribute(el, name, value ?? \"\")\r\n                }\r\n                return attrValue.onChange((value, oldValue) => {\r\n                    if (value && typeof value == \"object\") {\r\n                        if (oldValue && typeof oldValue == \"object\") {\r\n                            const isAsOld = value.attrName === oldValue.attrName && value.attrValue === oldValue.attrValue\r\n                            if (!isAsOld) {\r\n                                update(value.attrName, value.attrValue ?? \"\")\r\n                            }\r\n                        } else {\r\n                            update(value.attrName, value.attrValue ?? \"\")\r\n                        }\r\n                    } else {\r\n                        update(value, \"\")\r\n                    }\r\n                    return cleanup\r\n                }, true)\r\n            }\r\n            return setAttribute(el, attrValue, true)\r\n        },\r\n        $if({ attrValue, el, index, data ,arg} = directiveOption) {\r\n            index = Math.random()\r\n            if (typeof data.listCondition != \"object\") data.listCondition = {}\r\n            const getValue = (value) => value instanceof Function ? value(el) : !!value\r\n            const hasValidNow=()=>Object.values(data.listCondition).every(isTrue => isTrue)\r\n            const makeVisible = (isVisible = hasValidNow()) => el.getTextRoot()\r\n                .then(textRef => {\r\n                    if(!textRef.parentNode){\r\n                        return el.onConnected(()=>el.getTextRoot().then(()=>hasValidNow() ? textRef.after(el) : el.remove()))\r\n                    }\r\n                    return textRef.parentNode && isVisible ? textRef.after(el) : el.remove()\r\n                })\r\n            if (attrValue instanceof RXState) {\r\n                return attrValue.onChange((value) => {\r\n                    const v=getValue(value)\r\n                    data.listCondition[index] =arg==\"false\"?!v:v\r\n                    makeVisible()\r\n                    return () => {\r\n                        delete data.listCondition[index]\r\n                        attrValue.destroy(true)\r\n                    }\r\n                }, true)\r\n            } else {\r\n                data.listCondition[index] = getValue(attrValue)\r\n                makeVisible()\r\n            }\r\n            return () => data.listCondition[index] = true\r\n        },\r\n        $ref({ el, attrValue } = directiveOption) {\r\n            if (attrValue instanceof RXState) {\r\n                attrValue=attrValue.value\r\n            }\r\n            if (attrValue instanceof Function) {\r\n                return attrValue(el)\r\n            }else if (useRef.isRef(attrValue)){\r\n                attrValue.current=el\r\n            }\r\n        },\r\n        $show({ el: dom, attrValue } = directiveOption) {\r\n            if (attrValue instanceof RXState) {\r\n                return attrValue.onChange((isShow) => {\r\n                    dom.hidden = !isShow\r\n                    return () => attrValue.destroy(true)\r\n                }, true)\r\n            } else {\r\n                dom.hidden = !attrValue\r\n            }\r\n        },\r\n        $bind({ el, arg, modifiers, attrValue } = directiveOption) {\r\n            const fnRmvs = []\r\n            if (attrValue instanceof RXState) {\r\n                fnRmvs.push(attrValue.onChange((v) => {\r\n                    if (arg in el) {\r\n                        el[arg] = v\r\n                    } else {\r\n                        el.setAttribute(arg, v)\r\n                    }\r\n                    return () => attrValue.destroy(true)\r\n                }, true))\r\n            }\r\n            const handlerEvent = () => {\r\n                const value = arg in el ? el[arg] : el.getAttribute(arg)\r\n                if (attrValue instanceof RXState) attrValue.set(value)\r\n            }\r\n            fnRmvs.push(...Object.keys(modifiers).map(eventName => {\r\n                el.addEventListener(eventName, handlerEvent)\r\n                return () => el.removeEventListener(eventName, handlerEvent)\r\n            }))\r\n            if (Object.keys(modifiers).length == 0) {\r\n                const eventName = [\"input\"].includes(el.localName) ? \"input\" : \"change\"\r\n                el.addEventListener(eventName, handlerEvent)\r\n                fnRmvs.push(() => el.removeEventListener(eventName, handlerEvent))\r\n            }\r\n            return () => fnRmvs.map(fn => fn())\r\n        },\r\n        $directives({ el, arg, modifiers, attrValue } = directiveOption) {\r\n            if (attrValue instanceof RXState) attrValue = attrValue.value\r\n            if (typeof attrValue == \"object\") {\r\n                Object.assign(this, attrValue)\r\n            }\r\n        }\r\n    }\r\n    initProps(refs = this.refs) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        const getrefs = ({ index }) => this.refs[index]\r\n        const generateKey = (data, key) => {\r\n            const gk = () => {\r\n                let i = Math.round(Math.random() * 100_000_000)\r\n                while ((key + `<${i}>`) in data) { i++ }\r\n                key += `<${i}>`\r\n                return key\r\n            }\r\n            if (key in data) {\r\n                if (key.includes(\"<\") && key.includes(\">\") && key.at(-1) == \">\") {\r\n                    const indexA = key.indexOf(\"<\")\r\n                    key = key.slice(0, indexA)\r\n                }\r\n                return gk()\r\n            }\r\n            return key\r\n        }\r\n        this.props = Object.entries(this.props).reduce((props, [attrName, value]) => {\r\n            const originalAttrName = attrName\r\n            const attrNameComputed = TemplateRef.parse(attrName, this.refs)\r\n            const valueArray = typeof value == \"string\" ? TemplateRef.split(value ?? \"\", getrefs) : [value]\r\n\r\n\r\n            if (/^\\s*$/.test(valueArray[0]) && !(valueArray[0] instanceof RXState)) valueArray.shift()\r\n            if (/^\\s*$/.test(valueArray.at(-1)) && !(valueArray[0] instanceof RXState)) valueArray.pop()\r\n\r\n            let hasValueFinal = false\r\n            let valueFinal\r\n            const getValue = () => {\r\n                if (hasValueFinal) return valueFinal\r\n                hasValueFinal = true\r\n                if (valueArray.length == 0) {\r\n                    valueFinal = \"\"\r\n                    return \"\"\r\n                }\r\n                if (valueArray.length == 1) {\r\n                    valueFinal = valueArray[0]\r\n                    return valueArray[0]\r\n                }\r\n                const stateValue = useMemo(() => valueArray.join(\"\") , valueArray)\r\n                valueFinal = stateValue\r\n                return stateValue\r\n            }\r\n            if (attrNameComputed) {\r\n                let hasCallback = false\r\n                const hasState = !!attrNameComputed.value.find(v => {\r\n                    if (v instanceof Function) {\r\n                        hasCallback = true\r\n                    }\r\n                    return v instanceof RXState\r\n                })\r\n                const isDirective = attrNameComputed.value[0] == \"$\" && attrNameComputed.value[1] instanceof Function\r\n                const createMemo = () => useMemo(() => ({\r\n                    attrName: attrNameComputed.value.map(v => v instanceof Function ? v.name : v instanceof RXState ? v.toString() : typeof v == \"object\" ? v?.constructor?.name : v).join(\"\"),\r\n                    attrValue: getValue()\r\n                }), [...attrNameComputed.value])\r\n\r\n                if (isDirective) {\r\n                    const callback = attrNameComputed.value[1]\r\n                    const id = Math.round(Math.random() * 1_000_000)\r\n                    const callbackName = (callback.name[0] == \"$\" ? callback.name : \"$\" + callback.name) + \"{\" + id + \"}\"\r\n                    this.directives[callbackName] = callback\r\n                    let key = \"$attrState\"\r\n                    key = generateKey(props, key)\r\n                    attrNameComputed.value[0] = \"\"\r\n                    attrNameComputed.value[1] = callbackName\r\n                    const attr = createMemo()\r\n                    props[key] = attr\r\n                    return props\r\n                } else if (hasState) {\r\n                    let key = \"$attrState\"\r\n                    key = generateKey(props, key)\r\n                    const attr = createMemo()\r\n                    props[key] = attr\r\n                    return props\r\n                } else if (hasCallback) {\r\n                    const lnc = [...attrNameComputed.value] // list Name Computed\r\n                    if (lnc[0] instanceof Function && lnc.length == 1) {\r\n                        let key = \"$onInit\"\r\n                        key = generateKey(props, key)\r\n                        props[key] = lnc[0]\r\n                        return props\r\n                    } else {\r\n                        let key = [...attrNameComputed.value].map(v => v instanceof Function ? v.name : v).join(\"\")\r\n                        key = generateKey(props, key)\r\n                        props[key] = getValue()\r\n                        return props\r\n                    }\r\n                } else if (attrNameComputed.value[0] instanceof Object && attrNameComputed.value.length === 1) {\r\n                    if (value != \"\") return props\r\n                    if (attrNameComputed.value[0].constructor !== Object) return props\r\n                    Object.entries(attrNameComputed.value[0]).map(([k, v]) => {\r\n                        k = generateKey(props, k)\r\n                        props[k] = v\r\n                    })\r\n                    return props\r\n                } else {\r\n                    attrName = attrNameComputed.valueString\r\n                }\r\n            }\r\n            let ismustState=false\r\n            if(attrName[0]==\":\"){\r\n                ismustState=true\r\n                attrName=attrName.slice(1)\r\n            }\r\n            if (attrName == \"children\") {\r\n                props.children = value\r\n                return props\r\n            }\r\n            attrName = generateKey(props, attrName)\r\n            props[attrName] = ismustState?useMemo(()=>getValue()):getValue()\r\n            return props\r\n        }, {})\r\n    }\r\n    constructor() {}\r\n    type\r\n    props\r\n    #dom\r\n    #parent\r\n    get parent(){return this.#parent}\r\n    set parent(parentFiber){\r\n        if(!(parentFiber instanceof FiberOfNode)) throw new Error('parentFiber doit être une instance FiberOfNode')\r\n        this.#parent=parentFiber\r\n    }\r\n    get dom(){\r\n        return this.#dom\r\n    }\r\n    set dom(domValue){\r\n        if(this.#dom) throw new Error(\"dom a déja une valeur Node \")\r\n        if(!(domValue instanceof Node)) throw new Error(\"domValue doit être une instance de Node\")\r\n        this.#dom=domValue\r\n    }\r\n}\r\nexport { customeElementRegistry }","import {TemplateRef} from \"../templateRef.js\"\r\nimport {FiberOfNode} from \"./FiberOfNode.js\"\r\n\r\nexport class FiberOfElement extends FiberOfNode {\r\n    constructor(type, props = {}, refs=new TemplateRef()) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        super()\r\n        this.type = type\r\n        this.refs = refs\r\n        this.props = Object.freeze({\r\n            ...props,\r\n            children: props.children?? []\r\n        })\r\n        this.props.children.map((child,index)=>{\r\n            if(child instanceof DocumentFragment){\r\n                this.props.children[index]=[...child.$children]\r\n            }\r\n        })\r\n        this.initProps(this.refs)\r\n        this.components=this.refs.components\r\n        if(this.components[type]){\r\n            this.type=this.components[type]\r\n        }\r\n        Object.freeze(this)\r\n    }\r\n}","import { TemplateRef } from \"../templateRef.js\"\r\nimport {FiberOfNode} from \"./FiberOfNode.js\"\r\n\r\nexport class FiberOfFragment extends FiberOfNode {\r\n    constructor(children, refs=new TemplateRef()) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        super()\r\n        this.refs = refs\r\n        this.type = \"FRAGMENT\"\r\n        this.props = Object.freeze({\r\n            children:children ?? []\r\n        })\r\n        this.initProps(this.refs)\r\n        Object.freeze(this)\r\n    }\r\n}","import { TemplateRef } from \"../templateRef.js\"\r\nimport {FiberOfNode} from \"./FiberOfNode.js\"\r\n\r\nexport class FiberOfText extends FiberOfNode {\r\n    constructor(text, refs=new TemplateRef()) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        super()\r\n        this.refs = refs\r\n        this.type = \"TEXT\"\r\n        this.props = Object.freeze({\r\n            nodeValue: text,\r\n            children: []\r\n        })\r\n        Object.freeze(this)\r\n        if(this.props.nodeValue instanceof Node ) {\r\n            if(this.props.nodeValue instanceof DocumentFragment){\r\n                console.log([...this.props.nodeValue.$children]);\r\n            }\r\n            return this.props.nodeValue\r\n        }\r\n        if (this.props.nodeValue instanceof FiberOfNode) return this.props.nodeValue\r\n    }\r\n}","import { useEvent, RXState } from \"../hooks/indexHooks.js\"\r\n\r\n\r\nimport { FiberOfElement, FiberOfFragment, FiberOfNode, FiberOfText } from \"./RxFiber/indexOfFiber.js\"\r\nimport { TemplateRef } from \"./templateRef.js\"\r\n\r\nconst needCallback = (callback, args, $this) => callback.apply($this, args)\r\nneedCallback.after = (callback, args, $this) => Promise.resolve().then(() => callback.apply($this, args))\r\nneedCallback.idle = (callback, args, $this) => requestIdleCallback(() => callback.apply($this, args))\r\n\r\n\r\n\r\n\r\n\r\nfunction createElement(fiber) {\r\n    const sendListOfDom=(list)=>list.flat(Infinity).map(child => createDom(child))\r\n    if (fiber instanceof Node) return fiber\r\n    if (fiber instanceof FiberOfNode && fiber.dom instanceof Node) return fiber.dom\r\n    if (fiber instanceof FiberOfFragment) {\r\n        return sendListOfDom(fiber.props.children)\r\n    }\r\n    if (fiber instanceof FiberOfText) {\r\n        if (Array.isArray(fiber.props.nodeValue)) {\r\n            return sendListOfDom(fiber.props.nodeValue)\r\n        }\r\n        return fiber.props.nodeValue instanceof Node ? fiber.props.nodeValue : new Text(fiber.props.nodeValue)\r\n    }\r\n    if (fiber instanceof FiberOfElement) {\r\n        if (fiber.components[fiber.type] instanceof Function) {\r\n            const component = fiber.components[fiber.type]\r\n            fiber.type = component\r\n        }\r\n        if (fiber.type instanceof Function) {\r\n            let props = fiber.props\r\n            if (typeof fiber.type.defaultProps == \"object\") props = { ...fiber.type.defaultProps, ...props }\r\n            const el = fiber.type(props)\r\n            return createDom(el)\r\n        }\r\n        return document.createElement(fiber.type)\r\n    }\r\n    if (Array.isArray(fiber)) {\r\n        return sendListOfDom(fiber)\r\n    }\r\n    if (fiber instanceof Function) {\r\n        let props = { children: [] }\r\n        if (typeof fiber.defaultProps == \"object\") props = { ...fiber.defaultProps, children: [] }\r\n        return createDom(fiber(props))\r\n    }\r\n    if (fiber instanceof RXState) {\r\n        return createDom(new FiberOfText(fiber, new TemplateRef()))\r\n    }\r\n    try {\r\n        return new Text(JSON.stringify(fiber))\r\n    } catch (error) {\r\n        return new Text(fiber)\r\n    }\r\n}\r\nfunction initProps(dom, fiber) {\r\n    if (!(dom instanceof Node)) throw new Error('dom doit etre un element node')\r\n    if (!(dom instanceof HTMLElement)) return null\r\n    if (fiber && fiber.type instanceof Function) return null;\r\n    if (!(fiber instanceof FiberOfElement)) return null\r\n    const globalData = {}\r\n    const counterName = {}\r\n\r\n    const setOneAttribute = (props, [attrName, attrValue], dom, listOnCleanup = []) => {\r\n        const setAttribute = (value, domEl = dom, attrN = attrName) => {\r\n            if (/^\\s*$/.test(attrN)) return\r\n            if(domEl instanceof HTMLSelectElement&&[\"multiple\",].includes(attrN)){\r\n                domEl.multiple=true\r\n            }else\r\n            if ([\"disabled\", \"hidden\"].includes(attrN)) {\r\n                // console.log(value);\r\n                // domEl.setAttribute(attrN,\"\")\r\n                return domEl[attrN] = value === \"\" ? true : value\r\n            } else if ((attrN in domEl) || ([\"object\", \"function\"].includes(typeof value))) {\r\n                if (typeof value == \"object\" && typeof domEl[attrN] == \"object\") return Object.assign(domEl[attrN], value)\r\n                return domEl[attrN] = value\r\n            }\r\n            domEl.setAttribute(attrN, value)\r\n        }\r\n        const setAttr = (el, attrName, attrValue) => {\r\n            const listrmv = []\r\n            setOneAttribute(props, [attrName, attrValue], el, listrmv)\r\n            return () => needCallback(() => listrmv.map(fn => fn instanceof Function && fn()/** */))\r\n        }\r\n        const rendAttribute = (update, onRemove) => {\r\n            const redOneStyle = (value) => {\r\n                if (value instanceof RXState) {\r\n                    dom.onCleanup = value.onChange((val, oldVal) => {\r\n                        update(val, oldVal)\r\n                        return () => value.destroy()\r\n                    }, true)\r\n                } else {\r\n                    update(value)\r\n                }\r\n            }\r\n            if (Array.isArray(attrValue)) {\r\n                attrValue.map(val => redOneStyle(val))\r\n            } else {\r\n                redOneStyle(attrValue)\r\n            }\r\n            dom.onCleanup = () => onRemove instanceof Function && onRemove()\r\n        }\r\n        const toClean = () => null\r\n        let cleanup = toClean\r\n        let resultReg\r\n        const rcState = attrValue\r\n        const originalAttrName = attrName\r\n        const res = /^([^<>]+)<\\d+>$/.exec(attrName)\r\n        if (res) { attrName = res[1] }\r\n        if (attrName == \"children\" || !(fiber instanceof FiberOfElement)) return props\r\n        if (typeof attrName != \"string\") return props\r\n\r\n        if (attrName && (attrName.startsWith('on') || attrName.startsWith('@'))) {\r\n\r\n            let type = attrName.slice(attrName.startsWith('on') ? 2 : 1).toLowerCase()\r\n            if (type.indexOf(\"<\") > -1) {\r\n                type = type.slice(0, type.indexOf(\"<\"))\r\n            }\r\n            const applyCallback = (fn, args = []) => {\r\n                if (fn instanceof RXState) {\r\n                    fn = fn.isDestroyed ? () => null : fn.value\r\n                }\r\n                return fn(...args)\r\n            }\r\n            const callback = (...args) => {\r\n                if (Array.isArray(attrValue)) {\r\n                    return attrValue.map(fn => applyCallback(fn, args))\r\n                }\r\n                applyCallback(attrValue, args)\r\n            }\r\n            let removeEv = () => dom.removeEventListener(type, callback)\r\n\r\n            dom.onDestroy(removeEv)\r\n            dom.addEventListener(type, callback)\r\n            cleanup = () => removeEv\r\n            return props\r\n        } else if (attrName[0] == \".\") {\r\n            const oldValue = dom[attrName.slice(1)]\r\n            dom[attrName.slice(1)] = attrValue\r\n            cleanup = () => dom[attrName.slice(1)] = oldValue\r\n            return props\r\n        } else if (resultReg = /^(?<name>(?:\\$|\\:)[^\\s</>\\:\\[\\]]+)(?:\\:(?<arg>[^\\s</>:\\[\\]]*)(\\[(?<modifiers>[^\\s</>\\[\\]]*)\\])?)?(?:\\<(?<index>\\d+)\\>)?$/.exec(attrName)) {\r\n            const { name, arg, modifiers } = resultReg.groups\r\n            counterName[name] = name in counterName ? counterName[name] + 1 : 0\r\n            if (fiber.directives[name] instanceof Function) {\r\n                let index = counterName[name]\r\n                const directivesMustSync = [\"$ref\"]\r\n                const callback = directivesMustSync.includes(name) ? needCallback : needCallback.after\r\n                callback(() => {\r\n                    if (!globalData[name]) globalData[name] = {}\r\n                    const rmv = fiber.directives[name]({\r\n                        setAttribute: setAttr,\r\n                        globalData,\r\n                        data: globalData[name],\r\n                        el: dom, attrName, attrValue,\r\n                        index: index ? Number(index) : 0,\r\n                        directiveName: name, arg,\r\n                        modifiers: modifiers?.split(',').reduce((data, modif) => { data[modif] = true; return data }, {}) || {}\r\n                    })\r\n                    if (rmv instanceof Function) {\r\n                        dom.onDestroy(rmv)\r\n                        cleanup = rmv\r\n                        listOnCleanup.push(cleanup)\r\n                    }\r\n                })\r\n            }\r\n            return props\r\n        } else if ([\"input\", \"select\",\"textarea\"].includes(dom.localName) && [\"value\", \"checked\"].includes(attrName) && (rcState instanceof RXState)) {\r\n            if ([\"select\"].includes(dom.localName)&&dom instanceof HTMLSelectElement) {\r\n                dom.value=rcState.value\r\n                dom.onReady(()=>{\r\n                    dom.selectedIndex=-1\r\n                    let i=-1\r\n                    for (let opt of dom){\r\n                        i++\r\n                        if(opt.value===rcState.value){\r\n                            dom.selectedIndex=i\r\n                        }\r\n                    }\r\n                })\r\n                // dom.selectedIndex=2\r\n            }\r\n            const rmv = (e) => needCallback.after(() => {\r\n\r\n                if ([\"checkbox\"].includes(e.target.type)) {\r\n                    return rcState.set(e.target.checked)\r\n                }\r\n                return rcState.set(e.target[attrName])\r\n            })\r\n            dom.addEventListener('input', rmv)\r\n            cleanup=()=>{\r\n                dom.removeEventListener(\"input\", rmv)\r\n                dom.value=\"\"\r\n            }\r\n            dom.onDestroy(cleanup)\r\n        } else if (attrName == \"style\" || /^style<\\d+>/.test(attrName)) {\r\n            const styleDefault = dom.style.cssText\r\n            const rendStyle = (value) => needCallback.after(() => {\r\n                if (value instanceof Object) {\r\n                    Object.assign(dom.style, value)\r\n                } else {\r\n                    dom.style.cssText += value\r\n                }\r\n            })\r\n            rendAttribute(rendStyle, () => rendStyle(styleDefault))\r\n            return props\r\n        } else if (attrName == \"class\" || /^class\\<\\d+\\>/.test(attrName)) {\r\n            const styleDefault = dom.getAttribute(\"class\")\r\n\r\n            const rendClass = (value, oldValue) => needCallback.after(() => {\r\n                const addValue = (_value) => String(_value).split(\" \").map(val => val && dom.classList.add(val))\r\n                const removeValue = (_value) => String(_value).split(\" \").map(val => val && dom.classList.remove(val))\r\n                Array.isArray(oldValue) ? oldValue.map(val => removeValue(val)) : removeValue(oldValue);\r\n                Array.isArray(value) ? value.map(val => addValue(val)) : addValue(value)\r\n            })\r\n            rendAttribute(rendClass, () => rendClass(styleDefault))\r\n            return props\r\n        } else if (attrName && attrName.startsWith('?')) {\r\n            attrName = /^([^<>]+)\\<\\d+\\>/.test(attrName) ? attrName.slice(0, attrName.indexOf(\"<\")) : attrName\r\n            if (!attrValue) return props\r\n            let rmvAttr//=setAttr(dom,attrName.slice(1),\"\")\r\n            const insertAttr = (value) => {\r\n                const inertAttr = (v) => setAttr(dom, attrName.slice(1), v)\r\n                if (typeof attrValue == \"object\") {\r\n                    const { when, value: val } = value\r\n                    if (when instanceof RXState) {\r\n                        let rmAt\r\n                        return when.onChange((isTrue) => {\r\n                            if (isTrue) {\r\n                                if (!rmAt) rmAt = inertAttr(val instanceof RXState ? val.get() : val)\r\n                            } else {\r\n                                if (rmAt) rmAt();\r\n                                rmAt = null\r\n                            }\r\n                            return () => rmAt && rmAt();\r\n                        }, true)\r\n                    } else {\r\n\r\n                        if (when) return inertAttr(val)\r\n                    }\r\n                } else {\r\n                    return inertAttr(value)\r\n                }\r\n            }\r\n            if (attrValue instanceof RXState) {\r\n\r\n            } else {\r\n                rmvAttr = insertAttr(attrValue)\r\n            }\r\n\r\n            const rmv = () => rmvAttr()\r\n            if (rmv instanceof Function) {\r\n                dom.onDestroy(rmv)\r\n                cleanup = rmv\r\n                listOnCleanup.push(cleanup)\r\n            }\r\n            return props\r\n        }\r\n        if (attrValue instanceof RXState) {\r\n            const state = attrValue\r\n            const clean = state.onChange(v => {\r\n                setAttribute(v)\r\n                return () => {\r\n                    state.destroy(true)\r\n                    dom.removeAttribute(attrName)\r\n                }\r\n            })\r\n            dom.onDestroy(clean)\r\n            attrValue = attrValue.value\r\n            listOnCleanup.push(clean)\r\n        }\r\n\r\n        setAttribute(attrValue)\r\n        if (cleanup === toClean) {\r\n            cleanup = () => {\r\n                dom.removeAttribute(attrName)\r\n            }\r\n        }\r\n        listOnCleanup.push(cleanup)\r\n        return props\r\n    }\r\n    Object.entries(fiber.props).reduce((props, [attrName, attrValue]) => setOneAttribute(props, [attrName, attrValue], dom), {})\r\n}\r\nconst updateArray = {\r\n    set(valueOfState, oldValueOfState, { methode, value, textRef, listElement }) {\r\n        if (!Array.isArray(listElement)) throw new Error(\"listElement doit être une Array\")\r\n        if (!Array.isArray(valueOfState)) throw new Error(\"valueOfState doit être une Array\")\r\n        textRef.$firstElement = listElement[0]\r\n        if (valueOfState.every(v => v instanceof Node)) {\r\n            const listDom = []\r\n            listElement.splice(0, listElement.length, ...valueOfState.map((item, indexItem) => {\r\n                const dom = createDom(item)\r\n                if (indexItem == 0) {\r\n                    if (textRef.$firstElement !== dom) {\r\n                        textRef.$firstElement = dom\r\n                        textRef.after(dom)\r\n                    }\r\n                } else if (listElement[indexItem] !== dom) {\r\n                    listDom.at(-1).after(dom)\r\n                } else { }\r\n                listDom.push(dom)\r\n                return dom\r\n            })).map(e => !listElement.find(_e => _e === e) && e?.destroy(true))\r\n        } else {\r\n            listElement.splice(0, listElement.length, ...valueOfState.map(v => {\r\n                const dom = createDom(v)\r\n                textRef.before(dom)\r\n                return dom\r\n            })).map(e => e.destroy())\r\n        }\r\n    }\r\n}\r\nfunction updateDataBinding(state, textDom, dom, listElement) {\r\n    const remove = state.onChange((valueOfState, oldValueOfState, { methode, value, ...option }) => {\r\n        oldValueOfState instanceof Node && valueOfState !== oldValueOfState && oldValueOfState.destroy(true)\r\n\r\n        if (valueOfState instanceof Node) {\r\n            listElement.splice(0, listElement.length).map(el => el instanceof Node && el.destroy())\r\n            textDom.data = \"\"\r\n            needCallback.idle(() => textDom.after(valueOfState))\r\n            listElement.push(valueOfState)\r\n        } else {\r\n            textDom.data = valueOfState\r\n            if (Array.isArray(valueOfState)) {\r\n                textDom.data = \"\"\r\n                const args = [valueOfState, oldValueOfState, { ...option, methode, value, listElement, textRef: textDom }]\r\n                needCallback.after(() => {\r\n                    if (updateArray[methode] instanceof Function) {\r\n                        updateArray[methode](...args)\r\n                    } else {\r\n                        updateArray.set(...args)\r\n                    }\r\n                })\r\n            } else if (valueOfState instanceof FiberOfNode) {\r\n                textDom.data = \"\"\r\n                let isUpdate = true\r\n                // console.log(isUpdate);\r\n                listElement.splice(0, listElement.length).map(el => el instanceof Node && el.destroy())\r\n                isUpdate = false\r\n                const el = createDom(valueOfState)\r\n                listElement.push(el)\r\n                el.onDestroy(() => listElement.length && remove())\r\n                let isRended = false\r\n                const putAfter = (elRef, elTarget, isforced = false) => {\r\n                    if (isRended && !isforced) return true\r\n                    if (elRef.parentNode) {\r\n                        elRef.after(elTarget)\r\n                        isRended = true\r\n                        return true\r\n                    }\r\n                    return false\r\n                }\r\n\r\n                const rendLater = () => {\r\n                    putAfter(textDom, el)\r\n                    if (!isRended) return requestIdleCallback(rendLater)\r\n                }\r\n                requestIdleCallback(rendLater)\r\n                textDom.onConnected((p) => {\r\n                    if (p instanceof Node && textDom.parentNode !== p) {\r\n                        p.append(textDom)\r\n                        return putAfter(textDom, el, true)\r\n                    }\r\n                    putAfter(textDom, el)\r\n                })\r\n            } else if (typeof valueOfState == \"object\") {\r\n                try {\r\n                    textDom.data = JSON.stringify(valueOfState, null, 20)\r\n                } catch (error) { }\r\n            }\r\n        }\r\n        return (withDom = true) => {\r\n            textDom.data = \"\"\r\n            listElement.map(dom => dom.destroy(withDom))\r\n            if (oldValueOfState instanceof Node) {\r\n                oldValueOfState.destroy()\r\n            }\r\n            if (withDom) {\r\n                textDom.remove()\r\n                state.destroy(true)\r\n            }\r\n        }\r\n    }, true)\r\n    dom.onDestroy(remove)\r\n}\r\nfunction bindData(textDom, textFiber) {\r\n    if (!(textFiber.props.nodeValue instanceof RXState)) return textDom\r\n    let state = textFiber.props.nodeValue\r\n    const dom = Array.isArray(state.value) ? new DocumentFragment() : textDom\r\n    textFiber.dom = dom\r\n    insertEventDom(dom)\r\n    if (Array.isArray(state.value)) dom.append(textDom)\r\n\r\n    if (!(textDom instanceof Text)) throw new Error(\"textDom doit être une instance de Text\")\r\n    if (!(textDom.onDestroy instanceof Function)) throw new Error(\"textDom.onDestroy doit être une fonction\")\r\n\r\n    let listElement = []\r\n    // updateDataBinding(state, textDom, dom, listElement)\r\n    needCallback.after(() => updateDataBinding(state, textDom, dom, listElement))\r\n\r\n    return dom\r\n}\r\n\r\nexport function insertEventDom(dom) {\r\n    if (!(dom instanceof Node)) throw new Error(\"dom doit etre un instance de Node\")\r\n    if (dom.destroy instanceof Function) return;\r\n\r\n    useEvent\r\n    let isDestroyed = false\r\n    let destroyList = []\r\n    const [onReady, dispatchReady] = useEvent({ clearAfterEachDispatch: true })\r\n    const [onConnected, dispatchConnected] = useEvent({ clearAfterEachDispatch: true })\r\n    let isReady = false\r\n    onReady(() => isReady = true)\r\n    const $children = [...dom.childNodes]\r\n    const textRef = new Text()\r\n    const root = new Text()\r\n    const getTextRoot = () => Promise.resolve().then(() => {\r\n        if (dom.parentNode) {\r\n            dom.after(textRef)\r\n            dom.after(root)\r\n        } else if (root.parentNode) {\r\n            root.after(textRef)\r\n        }\r\n        return textRef\r\n    })\r\n    Object.defineProperties(dom, {\r\n        \"onConnected\": {\r\n            get: () => onConnected,\r\n            set: val => onConnected(val)\r\n        },\r\n        \"onReady\": {\r\n            get: () => onReady,\r\n            set: val => onReady(val)\r\n        },\r\n        \"isReady\": {\r\n            get: () => isReady,\r\n        },\r\n        \"dispatchReady\": {\r\n            get: () => dispatchReady,\r\n        },\r\n        \"dispatchConnected\": {\r\n            get: () => dispatchConnected\r\n        },\r\n        \"model\": {},\r\n        isDestroyed: {\r\n            get() { return isDestroyed }\r\n        },\r\n        isClean: {\r\n            get() { return isDestroyed }\r\n        },\r\n        \"destroyList\": { get() { return [...destroyList] } },\r\n        \"onDestroy\": {\r\n            value: (callback) => {\r\n                if (callback instanceof RXState && callback.value instanceof Function) {\r\n                    const state = callback\r\n                    callback = (...args) => {\r\n                        if (!(state.value instanceof Function)) throw new Error(\"state.value doit etre une function\")\r\n                        state.value(...args)\r\n                    }\r\n                } else if (Array.isArray(callback)) {\r\n                    callback.map(fn => dom.onDestroy(fn))\r\n                    return\r\n                }\r\n                if ((callback instanceof Function)) {\r\n                    destroyList.push(callback)\r\n                }\r\n            },\r\n            writable: false\r\n        },\r\n        \"destroy\": {\r\n            value: (withDom = false) => {\r\n                if (dom instanceof Node && !(dom instanceof DocumentFragment)) {\r\n                    dom.remove()\r\n                }\r\n                if (isDestroyed) return\r\n                dom.destroyList.map(fn => fn(withDom))\r\n                isDestroyed = true\r\n                destroyList = []\r\n                if (dom instanceof Text && withDom) {\r\n                    dom.data = \"\"\r\n                }\r\n                dom.$children.map(el=>el instanceof Node&&el.destroy())\r\n            },\r\n            writable: false\r\n        },\r\n        \"onCleanup\": {\r\n            get() { return dom.onDestroy },\r\n            set(value) { dom.onDestroy(value) }\r\n        },\r\n        \"$children\": {\r\n            get() { return $children },\r\n            set(value) {\r\n                value = Array.isArray(value) ? value : [value]\r\n                $children.push(...value)\r\n            }\r\n        },\r\n        getTextRoot: {\r\n            value: getTextRoot,\r\n            writable: false\r\n        },\r\n        textRef: {\r\n            get() { return textRef }\r\n        }\r\n\r\n    })\r\n    dom.onConnected(() => {\r\n        if (dom.parentNode) {\r\n            dom.after(root)\r\n        }\r\n    })\r\n}\r\n\r\nconst listOfTagPriority = [\"style\", \"link\"]\r\nconst isRendPriority = (element, container) => {\r\n    if (listOfTagPriority.includes(String(element?.type).toLowerCase())) return true\r\n    if (listOfTagPriority.includes(container.localName)) return true\r\n}\r\nfunction createTextRef(container) {\r\n    if (!(container instanceof Node)) throw new Error(\"container doit être de type Node\")\r\n    const txtRef = new Text(\"\")\r\n    if (container.shadowRoot) {\r\n        container.shadowRoot.append(txtRef)\r\n    } else {\r\n        container.append(txtRef)\r\n    }\r\n    return txtRef\r\n}\r\nexport function render(element, container = document.body) {\r\n    if(typeof container ==\"string\") container=document.querySelector(container)\r\n    if (!(container instanceof Node)) throw new Error(\"container doit être de type Node\")\r\n    let returnDom\r\n    const txtRef = createTextRef(container)\r\n    function appendChild(dom) {\r\n        if (Array.isArray(dom)) {\r\n            returnDom = dom.map(child => render(child, container))\r\n            return returnDom\r\n        }\r\n        insertEventDom(dom)\r\n        insertEventDom(container)\r\n        container.onDestroy(dom.destroy)\r\n        const append = () => {\r\n            txtRef.after(dom)\r\n            if (container instanceof DocumentFragment) container.$children = dom;\r\n            dom.dispatchConnected(container)\r\n        }\r\n        append()\r\n        txtRef.remove()\r\n        returnDom = dom\r\n    }\r\n    async function init() {\r\n        if (returnDom) return returnDom\r\n        if (!(container instanceof Node)) throw new Error(\"container doit etre un instance de Node\")\r\n        const dom = await needCallback.after(() => createDom(element))\r\n        appendChild(dom)\r\n        return returnDom\r\n    }\r\n    if (isRendPriority(element, container)) {\r\n        const dom = createDom(element)\r\n        appendChild(dom)\r\n    }\r\n    return init()\r\n}\r\n\r\nexport function createDom(fiber) {\r\n    if (fiber instanceof FiberOfNode && fiber.dom instanceof Node) {\r\n        throw new Error(\"fibre a déja une instance dom, fais une copie du fibre si vous voulez une autre instance\")\r\n    }\r\n    if (Array.isArray(fiber)) {\r\n        // fiber=new FiberOfFragment(fiber)\r\n        return fiber.flat(Infinity).map(child => createDom(child))\r\n    }else if(fiber instanceof Function){\r\n        fiber=new FiberOfElement(fiber,{children:[]})\r\n    }else if (!(fiber instanceof EventTarget) && !(fiber instanceof FiberOfNode)) {\r\n        fiber = new FiberOfText(fiber)\r\n    }\r\n    const dom = createElement(fiber)\r\n    if (fiber instanceof FiberOfNode && dom instanceof Node&&!(dom.fiber instanceof FiberOfNode)) {\r\n        Object.defineProperty(dom, \"fiber\", {\r\n            get: () => fiber\r\n        })\r\n    }\r\n    const createChild = (childDom) => {\r\n        insertEventDom(childDom)\r\n        if (fiber instanceof Node) return childDom\r\n        if (fiber instanceof FiberOfText && RXState.isState(fiber.props.nodeValue)) return bindData(childDom, fiber)\r\n        if (fiber && fiber.type instanceof Function) return childDom\r\n        const rending = []\r\n        if (fiber instanceof FiberOfNode) {\r\n            fiber.dom = childDom\r\n            if (!fiber.props.children) return childDom\r\n            rending.push(...fiber.props.children.flat(Infinity).map(child => {\r\n                if (typeof fiber.components != \"object\") {\r\n                    console.warn(\"fiber.component doit être une object\");\r\n                    fiber.components = {}\r\n                }\r\n                if (child instanceof FiberOfNode) {\r\n                    child.parent = fiber\r\n                    Object.assign(child.directives, fiber.directives)\r\n                    child.components = fiber.components\r\n                }\r\n                return render(child, childDom)\r\n            }))\r\n        }\r\n        Promise.all(rending)\r\n            .then((children) => {\r\n                initProps(childDom, fiber)\r\n                needCallback.after(() => childDom.dispatchReady(childDom, children))\r\n            })\r\n        return childDom\r\n    }\r\n    if (Array.isArray(dom)) {\r\n        if (fiber.parent instanceof FiberOfNode) {\r\n            return dom\r\n        }\r\n        const doc = new DocumentFragment\r\n        insertEventDom(doc)\r\n        doc.$children = dom\r\n        doc.append(...dom)\r\n        return doc\r\n    }\r\n    return createChild(dom)\r\n}","\r\nimport { TemplateRef } from \"../templateRef.js\"\r\nimport { combineAndNoSaveRegExp, createRegExpSplit, combineAndSaveRegExp } from \"../RgExp.js\"\r\n\r\nexport const listTagEmpty = [\"area\", \"base\", \"br\", \"col\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]\r\nexport const listTagKnown = [\"a\", \"abbr\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"bdi\", \"bdo\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"dialog\", \"dir\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"font\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"marquee\", \"menu\", \"meta\", \"meter\", \"nav\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"picture\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"slot\", \"small\", \"source\", \"span\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"template\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"title\", \"tr\", \"track\", \"u\", \"ul\", \"var\", \"video\", \"wbr\"]\r\n\r\n//a mettre dans RgExp une fois stable\r\nexport const regExpHtmlTag = /<(?:\\/\\s*)?(?:[^\\!<>\\s\"'=\\/\\\\]+)\\s*(?:(?:\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*\"[^\"]*\"|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*'[^']*'|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*[^<>\\s\"'=\\/\\\\]+|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+?)*)\\s*(?:\\/)?\\s*>/g\r\nexport const regExpHtmlTagSave = /(<(?:\\/\\s*)?(?:[^\\!<>\\s\"'=\\/\\\\]+)\\s*(?:(?:\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*\"[^\"]*\"|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*'[^']*'|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*[^<>\\s\"'=\\/\\\\]+|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+?)*)\\s*(?:\\/)?\\s*>)/\r\nexport const regExpHtmlTagFullCapture = /<(?<isClosingTag>\\/\\s*)?(?<type>[^\\!<>\\s\"'=\\/\\\\]+)\\s*(?<attr>(?:\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*\"[^\"]*\"|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*'[^']*'|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*[^<>\\s\"'=\\/\\\\]+|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+?)*)\\s*(?<isAutoClose>\\/)?\\s*>/\r\nexport const regStringValidHtml = /[^<>\\s\"'`=\\/\\\\]+/\r\nexport const regStringValidHtmlSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)$/\r\nexport const regAttributeName = /(?<=\"|'|`|\\s*)[^<>\\s\"'`=\\/\\\\]+\\s*/\r\n\r\n// export const regAttrWithQuotes=/(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*\"[^\"]*\")/\r\nexport const regAttrWithQuotesSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*\"(?<attrValue>[^\"]*)\"$/\r\nexport const regExpAttrWithQuotes = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, /\"[^\"]*\"/)\r\n\r\n// export const regAttrWithApostrophe=/(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*'[^']*')/\r\nexport const regAttrWithApostropheSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*'(?<attrValue>[^']*)'$/\r\nexport const regExpAttrWithApostrophe = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, /'[^']*'/)\r\n\r\nexport const regAttrWithBacktic = /(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*`[^`]*`)/\r\nexport const regAttrWithBackticSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*`(?<attrValue>[^`]*)`$/\r\nexport const regExpAttrWithBacktic = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, /`[^`]*`/)\r\n\r\n// export const regAttrWithNoDelimiter=/(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*[^<>\\s\"'`=\\/\\\\]+\\s*)/\r\nexport const regAttrWithNoDelimiterSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*(?<attrValue>[^<>\\s\"'`=\\/\\\\]+)$/\r\nexport const regExpAttrWithNoDelimiter = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, regStringValidHtml)\r\n\r\n\r\nexport const regExpAttr = createRegExpSplit(\r\n    regExpAttrWithQuotes,\r\n    regExpAttrWithApostrophe,\r\n    regExpAttrWithBacktic,\r\n    regExpAttrWithNoDelimiter,\r\n    /\\s+/\r\n)\r\n\r\nexport function fasteSplitHtmlString(htmlString) { //1\r\n    return htmlString.split(regExpHtmlTagSave)\r\n}\r\n\r\n\r\nexport function isOpenTag(htmlTag) { // 1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    return result.groups.isClosingTag ? false : true\r\n}\r\nexport function isCloseTag(htmlTag) { //1\r\n    return !isOpenTag(htmlTag)\r\n}\r\nexport function getCloseTag(htmlTag) { //1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    return isCloseTag(htmlTag) ? result.groups.type : null\r\n}\r\nexport function getOpenTag(htmlTag) { //1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    return !result.groups.isClosingTag ? result.groups.type : null\r\n}\r\n\r\nexport function parseAttrString(attrString) { //1\r\n    let result\r\n    const counterName = {}\r\n    const value = (attr, name, value) => {\r\n        const directive = (val = value, names = name) => {\r\n            if (attr[names]) {\r\n                let i = Math.round(Math.random() * 100_000_000)\r\n                while ((names + `<${i}>`) in attr) { i++ }\r\n                attr[names + `<${i}>`] = val\r\n                return attr[names]\r\n            }\r\n            return val\r\n        }\r\n        if (name.startsWith(\"?\")||name.startsWith(\"on\")||[\"style\",\"class\"].includes(name)) {\r\n            return directive()\r\n        } else if (result = /^(?<name>\\$[^\\s</>:\\[\\]]+)(?:\\:(?<arg>[^\\s</>:\\[\\]]*)(\\[(?<modifiers>[^\\s</>\\[\\]]*)\\])?)?(?:\\<(?<index>\\d+)\\>)?$/.exec(name)) {\r\n            return directive()\r\n        }\r\n        return isNaN(value) ? value : Number(value)\r\n    }\r\n    return attrString.split(regExpAttr).reduce((attr, chaine) => {\r\n        if (/^\\s*$/.test(chaine)) return attr\r\n        let result\r\n        if (result = regAttrWithQuotesSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regAttrWithApostropheSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regAttrWithBackticSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regAttrWithNoDelimiterSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regStringValidHtmlSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = \"\"\r\n        }\r\n        return attr\r\n    }, {})\r\n}\r\nexport function parseHtmlTag(htmlTag) { //1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    const { type, attr, isAutoClose, isClosingTag } = result.groups\r\n    return {\r\n        get isTagEmpty() {\r\n            return listTagEmpty.includes(this.type)\r\n        },\r\n        get isTagKnown() {\r\n            return listTagKnown.includes(this.type)\r\n        },\r\n        type,\r\n        attr,\r\n        isAutoClose,\r\n        isClosingTag,\r\n        htmlTag,\r\n        props: parseAttrString(result.groups.attr),\r\n        initType(rxRefs) {\r\n            if (!(rxRefs instanceof TemplateRef)) throw new Error(\"rxRefs must be instance of RXRefs\")\r\n            const parseResult = TemplateRef.parse(this.type, rxRefs)\r\n            if (parseResult && parseResult.value.length == 2 && parseResult.value[0].at(-1) == \":\" && parseResult.value[1] instanceof Function) {\r\n                this.type = parseResult.value[0].slice(0, -1)\r\n                rxRefs.components[this.type] = parseResult.value[1]\r\n                // this.type = rxRefs.components[this.type]\r\n                return this.type\r\n            }\r\n            let type = TemplateRef.split(this.type, (({ index }) => rxRefs[index]))\r\n            type = type.length === 1 ? type[0] : type.join(\"\")\r\n            if (typeof type != \"string\" && typeof type != \"function\") {\r\n                type = `${typeof type}.is-not-component-valid`\r\n            }\r\n            // const componentList = Object.keys(rxRefs.components ?? {})\r\n            // if (!isKnownElement(type) && componentList.includes(type)) {\r\n            //     type = rxRefs.components[type]\r\n            // }\r\n            return this.type = type\r\n        }\r\n    }\r\n}\r\nexport function isKnownElement(type) {\r\n    return listTagKnown.includes(type?.toLowerCase?.())\r\n}\r\nexport function isTagEmpty(type) {\r\n    return listTagEmpty.includes(type?.toLowerCase?.())\r\n}","import { FiberOfElement, FiberOfFragment, FiberOfNode, FiberOfText } from \"../RxFiber/indexOfFiber.js\"\r\nimport { TemplateRef } from \"../templateRef.js\"\r\nimport { createRegExpSplit } from \"../RgExp.js\"\r\nimport { fasteSplitHtmlString, isOpenTag, isTagEmpty, parseHtmlTag } from \"./HtmlStringParser.js\"\r\n\r\nfunction rxReform(fiberList, htmlStringSplited, dataBinding) {\r\n    while (htmlStringSplited.length) {\r\n        const text = htmlStringSplited.shift()\r\n        if (/^\\s*$/.test(text)) continue\r\n        if (isOpenTag(text)) {\r\n            const fiber = parseHtmlTag(text)\r\n            fiber.children = []\r\n            fiber.initType(dataBinding)\r\n            if (!isTagEmpty(fiber.type) && !fiber.isAutoClose) {\r\n                getChildren(fiber, htmlStringSplited, dataBinding)\r\n            }\r\n            const el = new FiberOfElement(fiber.type, { ...fiber.props, children: fiber.children }, dataBinding)\r\n            fiberList.push(el)\r\n        } else {\r\n            const listT = text.split(createRegExpSplit(TemplateRef.regExp, /{{[^{}]*}}/))//(/((?:\\(_\\|-\\[RXRefs\\{index:\\d+,type:\\w+\\}\\]-\\|_\\))|(?:{{[^{}]*}}))/)\r\n            if (/^\\s*$/.test(listT[0])) listT.shift()\r\n            if (/^\\s*$/.test(listT.at(-1))) listT.pop()\r\n            fiberList.push(...listT.map(t => {\r\n                const isRef = (typeof t == \"string\") ? TemplateRef.parse(t, dataBinding) : t\r\n                t = isRef ? isRef.value[0] : t\r\n                if (typeof t != \"string\") return t\r\n                const isComment = (c) => /\\s*\\<\\!--.*--\\>\\s*/.test(c)\r\n                if (isComment(t)) {\r\n                    return t.split(/(\\s*\\<\\!--.*--\\>\\s*)/).map(t =>isComment(t) ? document.createComment(/^\\s*\\<\\!--(.*)--\\>\\s*$/.exec(t)[1]): t).filter(t => t)\r\n                }\r\n                return new FiberOfText(t, dataBinding)\r\n            }))\r\n        }\r\n    }\r\n    return fiberList\r\n}\r\nfunction getChildren(fiber, htmlStringSplited, dataBinding) {\r\n    if (fiber.type instanceof Function && !fiber.type.name) return\r\n    let count = 1\r\n    const index = htmlStringSplited.findIndex(e => {\r\n        const tag = parseHtmlTag(e)\r\n        const rcRef = TemplateRef.parse(tag ? tag.type : e, dataBinding)\r\n        if (tag && ((rcRef && rcRef.value[0] === fiber.type) || (tag.type === fiber.type))) {\r\n            count = tag.isClosingTag ? count - 1 : count + 1\r\n            if (tag.isClosingTag && count <= 0) return true\r\n        }\r\n        return false\r\n    })\r\n    if (index === -1) {\r\n        fiber.children = htmlStringSplited.splice(0, htmlStringSplited.length).filter(e => !/^\\s*$/.test(e))\r\n    } else {\r\n        fiber.children = htmlStringSplited.splice(0, index + 1).filter(e => !/^\\s*$/.test(e))\r\n        fiber.children.pop()\r\n    }\r\n    if (fiber.type == \"script\") {\r\n        let innerText = fiber.children.join(\"\")\r\n        const res = TemplateRef.parse(innerText, dataBinding)\r\n        if (res) {\r\n            innerText = res.valueString\r\n        }\r\n        fiber.children = [new Text(innerText)]\r\n    } else {\r\n        fiber.children = rxReform([], fiber.children, dataBinding)\r\n    }\r\n}\r\nfunction parse(strings, ...rxRefs) {\r\n    return [[...rxRefs.reduce((list, _str, index) => {\r\n        list.push(strings[index], `(_|-[RXRefs{index:${index},type:${typeof rxRefs[index]}}]-|_)`)\r\n        return list\r\n    }, []), strings[rxRefs.length]].join(\"\"), rxRefs]\r\n}\r\n\r\nfunction parseHtmlString(htmlString, rxRefs) {\r\n    if (!(rxRefs instanceof TemplateRef)) throw new Error(\"rxRefs must be instance of RXRefs\")\r\n    const htmlArray = fasteSplitHtmlString(htmlString)\r\n    const html = rxReform([], htmlArray, rxRefs)\r\n    if (html.length == 1) {\r\n        const el = html[0]\r\n        return el instanceof FiberOfNode ? el : new FiberOfText(el, rxRefs)\r\n    }\r\n    const frag = new FiberOfFragment(html, rxRefs)\r\n    return frag\r\n}\r\n\r\nexport function template(strings, ...refs) {\r\n    let config\r\n    if (typeof refs[0] == \"object\" && refs[0][\"<isStore>\"] === true) {\r\n        config = refs[0]\r\n        refs[0] = \"\"\r\n    }\r\n    const [htmlstring] = parse(strings, ...refs)\r\n    const rxRefs = new TemplateRef(...refs)\r\n    const rcNode = parseHtmlString(htmlstring, rxRefs)\r\n    if (config) {\r\n        if (config.components && typeof config.components == \"object\") rcNode.components = config.components\r\n        if (config.directives && typeof config.directives == \"object\") rcNode.directives = config.directives\r\n    }\r\n    return rcNode\r\n}","export { createDom, insertEventDom, render } from \"./core/core.js\";\r\nexport {component} from \"./core/component.js\";\r\nexport { useState, RXState,useRef,useEffect,useLayoutEffect,useProps,useEvent,useMemo } from \"./hooks/indexHooks.js\";\r\nexport {define} from \"./core/customeElement.js\";\r\nexport { TemplateRef as LinksOfDataInTemplateString } from \"./core/templateRef.js\";\r\nexport {FiberOfElement,FiberOfFragment,FiberOfNode,FiberOfText} from \"./core/RxFiber/indexOfFiber.js\";\r\nexport { template } from \"./core/RcHtmlString/RcHtmlString.js\";\r\n\r\nimport { createDom, } from \"./core/core.js\";\r\nimport { useState,RXState} from \"./hooks/indexHooks.js\";\r\nimport { template } from \"./core/RcHtmlString/RcHtmlString.js\";\r\n\r\n\r\nexport function html(...args) {\r\n    return createDom(template(...args))\r\n}\r\nconst needCallback = (callback, args, $this) => callback.apply($this, args)\r\nneedCallback.after = (callback, args, $this) => Promise.resolve().then(() => callback.apply($this, args))\r\nneedCallback.idle = (callback, args, $this) => requestIdleCallback(() => callback.apply($this, args))\r\n//###################\r\nconst Fragment = \"FRAGMENT\"\r\nconst TextElement = \"TEXT\"\r\nexport function createFiber(type, props, ...children) {\r\n    const refs = new LinksOfDataInTemplateString()\r\n    props = props ?? { children: [] }\r\n    children = children.map(child => child instanceof RcHtmlNode ? child : new RcHtmlText(child, refs))\r\n    if (type == Fragment) {\r\n        return new RcHtmlFragment(children, refs)\r\n    }\r\n    if (type == TextElement) {\r\n        return new RcHtmlText(children, refs)\r\n    }\r\n    return new RcHtmlElement(type, { ...props, children }, refs)\r\n}\r\ncreateFiber.Fragment = Fragment\r\ncreateFiber.Text = TextElement\r\n//###################\r\n\r\n\r\nfunction map(state, callback) {\r\n    const list=state instanceof RXState?[...(state.value)]:state\r\n    var [state,setState]=useState(state,(v)=>{\r\n        list.splice(0,list.length,...v)\r\n        return list\r\n    })\r\n    // isFunction(callback)\r\n    const createState = (v, i) => [useState(v)[0], useState(i)[0]]\r\n    const rendMap = (v) => callback(...v, state,(value)=>{\r\n        const [item,index]=v\r\n        return setState.edit(index,value)\r\n    })\r\n    const listState = state.value.map(createState)\r\n    let listElement = needCallback.after(()=>listState.map(rendMap))\r\n    const [items, setItems] = useState(listElement)\r\n    items.onChange(list=>needCallback.after(()=>{\r\n        if(list instanceof Promise) return;\r\n        if(!list.every(item=>item instanceof Node)){\r\n            throw new Error(\"html.map doit retourner des list d'element Node\")\r\n        }\r\n    }),true)\r\n    const update = () => listState.map(([v, i], index) => needCallback.after(()=>{\r\n        if (!i.isDestroyed) i.set(index);\r\n        if (!v.isDestroyed) v.set(state.value[index]);\r\n    }))\r\n    state.onChange((val) => {\r\n        if (listState.length > val.length) {\r\n            const indexStart = val.length\r\n            const end = listState.length\r\n            listState.splice(indexStart, end).map(s => s.map(i => i.destroy(true)))\r\n            setItems.splice(indexStart, end)\r\n        } else if (listState.length < val.length) {\r\n            const indexStart = listState.length\r\n            listState.push(...val.slice(indexStart).map(createState))\r\n            listState.map(([, index], i) => index.set(i))\r\n            setItems.push(...listState.slice(indexStart).map(rendMap))\r\n        }\r\n        update()\r\n        // console.log(items.value);\r\n    })\r\n    return items\r\n}\r\nhtml.map=map\r\n","import { useProps } from \"../hooks/indexHooks.js\"\r\n\r\nexport function component(callback, option = { defaultProps: {}}) {\r\n    if(typeof option!=\"object\") throw new Error(\"option doit être une de type object\")\r\n    const defaultProps=option.defaultProps??{}\r\n    if(typeof defaultProps!=\"object\") throw new Error(\"option.defaultProps doit être une de type object\")\r\n    const fn=(props) => callback(useProps({...defaultProps,...props}))\r\n    fn.defaultProps=defaultProps\r\n    return fn\r\n}\r\n","import { useEvent, useProps, useState } from \"../hooks/indexHooks.js\"\r\nimport { createDom, insertEventDom } from \"./core.js\"\r\n\r\n\r\nexport function define(tagName, renderCallback, option = { defaultProps: {}, shadowRoot: null }) {\r\n    const _defaultProps = { ...(option.defaultProps ?? {}) }\r\n    const EVENTS = {}\r\n    const CLASSElement = class extends HTMLElement {\r\n        #id = Math.random()\r\n        static get observedAttributes() { return Object.keys(_defaultProps) }\r\n        attributeChangedCallback(name, oldV, newV) {\r\n            if (useState.isState(this.props[name]) && this.props[name].toString() != newV && typeof this.props[name].value != \"object\") {\r\n                this.props[name].set(newV)\r\n            }\r\n        }\r\n        constructor(props) {\r\n            props = typeof props == \"object\" ? props : { children: [] }\r\n            super()\r\n            insertEventDom(this)\r\n            // this.innerHTML='<slot/>'\r\n            props = useProps({ ..._defaultProps, ...props })\r\n            props.children.push(...[...this.childNodes].map(c => {\r\n                c.remove()\r\n                insertEventDom(c)\r\n                return c\r\n            }))\r\n            this.props = props\r\n            Object.entries(props).map(([attrName, attrValue]) => {\r\n                if (attrName == \"children\" || attrName.startsWith('$')) return;\r\n                this.onCleanup = attrValue.onChange((val) => {\r\n                    if (typeof val != 'object') {\r\n                        Promise.resolve().then(() => this.setAttribute(attrName, attrValue.toString()))\r\n                        return () => this.removeAttribute(attrName)\r\n                    }\r\n                    this.removeAttribute(attrName)\r\n                }, true)\r\n            })\r\n            const root = option.shadowRoot && this.attachShadow({\r\n                mode: \"closed\" === option.shadowRoot?.mode ? \"closed\" : \"open\",\r\n                delegatesFocus: !!option.shadowRoot?.delegatesFocus,\r\n                slotAssignment: \"manual\"// === option.shadowRoot?.slotAssignment ? \"manual\" : \"named\"\r\n            })\r\n            EVENTS[this.#id] = {\r\n                connectedCallback: useEvent(),\r\n                disconnectedCallback: useEvent(),\r\n                adoptedCallback: useEvent(),\r\n                onCleanup: [this.onCleanup],\r\n                mounted: useEvent({\r\n                    onSubscribe: (fn) => {\r\n                        return (...arg) => {\r\n                            const rv = fn(arg)\r\n                            if (rv instanceof Function) {\r\n                                this.onCleanup(rv)\r\n                            }\r\n                        }\r\n                    }\r\n                }),\r\n            }\r\n            const $component = Object.freeze({\r\n                root, el: this,\r\n                ...Object.entries(EVENTS[this.#id]).reduce((ob, [k, v]) => {\r\n                    ob[k] = v[0]\r\n                    return ob\r\n                }, {})\r\n            })\r\n            const children = createDom(renderCallback(props, $component))\r\n            const container = root || this\r\n            container.append(children)\r\n            const re = this.dispatchReady(this, children)\r\n            EVENTS[this.#id].mounted[1](this, children)\r\n        }\r\n        connectedCallback(...arg) { EVENTS[this.#id].connectedCallback[1](...arg) }\r\n        disconnectedCallback(...arg) { EVENTS[this.#id].disconnectedCallback[1](...arg) }\r\n        adoptedCallback(...arg) { EVENTS[this.#id].adoptedCallback[1](...arg) }\r\n    }\r\n\r\n    customElements.define(tagName, CLASSElement, { extends: option.extends })\r\n    return (props) => new CLASSElement({children:[],...props})\r\n}","import { RXState } from \"./useState.js\"\r\n\r\nexport function useEffect(callback, states = []) {\r\n    if (!Array.isArray(states)) throw new Error(\"states doit être une Array\")\r\n    const listRmv = []\r\n    let remove\r\n    const array = [...states]\r\n    const getValue = s => s instanceof RXState ? s.value : s\r\n    const update=i=> Promise.resolve().then(() => remove = callback([...array.map(getValue)],i))\r\n    array.forEach((st, i) => {\r\n        if (st instanceof RXState) {\r\n            listRmv.push(st.onChange(() => {update(i)}))\r\n        }\r\n    })\r\n    requestIdleCallback(() => remove = callback([...array.map(getValue)],-1))\r\n    return () => {\r\n        listRmv.splice(0,listRmv.length).map(fn => fn?.())\r\n        if (remove instanceof Function) remove(-1, [...array].map(getValue))\r\n    }\r\n}","import { RXState } from \"./useState.js\"\r\n\r\nexport function useLayoutEffect(callback, states = []) {\r\n    if (!Array.isArray(states)) throw new Error(\"states doit être une Array\")\r\n    const listRmv = []\r\n    let remove\r\n    const array = [...states]\r\n    const getValue = s => s instanceof RXState ? s.value : s\r\n    const update=i=> remove = callback([...array.map(getValue)],i)\r\n    array.forEach((st, i) => {\r\n        if (st instanceof RXState) {\r\n            listRmv.push(st.onChange(() => {update(i)}))\r\n        }\r\n    })\r\n    update(-1)\r\n    return () => {\r\n        listRmv.splice(0,listRmv.length).map(fn => fn?.())\r\n        if (remove instanceof Function) remove(-1, [...array].map(getValue))\r\n    }\r\n}"],"names":["guardFn","v","stateSymbol","Symbol","isState","ref","bind","RXState","isArray","Array","this","value","toString","String","valueOf","static","createState","guard","currentValueOfState","oldValueOfState","isDestroyed","subscriber","ID","Math","random","GUARDS","DESTROY_EVENTS","Set","UPDATE_EVENTS","ACTIONS","Object","freeze","guards","id","len","onChange","size","onCleanup","addGuard","Function","callback","a","lastIndex","push","isRemoved","splice","i","find","fn","clear","withDom","forEach","destroy","callbackOrState","directApply","state","args","set","slice","Error","on","dispatch","undefined","methode","onDispatch","arg","isCalled","delete","add","oldValue","constructor","super","defineProperty","get","enumerable","assign","actions","toValidate","option","oldValues","reduceRight","val","Promise","createStateComputed","dependencies","optDependencies","update","optionState","setState","useState","listrmv","map","st","_1","_2","entries","stateType","type","fnGuard","then","_oldValue","dispatchUpdate","stateInstace","isFunction","getIndex","index","findIndex","isNaN","rendMap","listState","listElement","items","setItems","length","indexStart","end","s","action","returnValue","remove","start","deleteCount","edit","pop","shift","unshift","reverse","fill","filter","predicate","sort","compareFn","b","every","item","arguments","callbackfn","thisArg","insertArrayMethode","k","payload","array","number","string","function","boolean","symbol","object","refSymbol","useRef","changeRef","OBJECT","configurable","useProps","props","reduce","prop","key","startsWith","isRef","handlerEvent","beforeDispatch","afterDispatch","data","onSubscribe","clearAfterEachDispatch","useEvent","handler","EVENTS","rest","useMemo","states","listRmv","getValue","combineAndNoSaveRegExp","regs","RegExp","regFinal","reg","source","getRegSource","combineRegExp","createRegExpSaved","createRegExp","createRegExpSplit","TemplateRef","regExp","regExpSaved","regExpSavedG","split","chaine","includeResults","l","r","parse","replaceAll","input","refs","result","exec","valueString","join","groups","components","customeElementRegistry","directiveOption","el","attrName","attrValue","directiveName","modifiers","FiberOfNode","directives","$onInit","console","warn","$shadowRoot","elementsCanAttachShadowRoot","includes","localName","oldChildren","childNodes","root","attachShadow","mode","children","innerHTML","append","$attrState","setAttribute","cleanup","name","$if","listCondition","hasValidNow","values","isTrue","makeVisible","isVisible","getTextRoot","textRef","parentNode","after","onConnected","$ref","current","$show","dom","isShow","hidden","$bind","fnRmvs","getAttribute","keys","eventName","addEventListener","removeEventListener","$directives","initProps","getrefs","generateKey","at","indexA","indexOf","round","gk","attrNameComputed","valueArray","test","valueFinal","hasValueFinal","stateValue","hasCallback","hasState","createMemo","callbackName","attr","lnc","ismustState","parent","parentFiber","domValue","Node","FiberOfElement","child","DocumentFragment","$children","FiberOfFragment","FiberOfText","text","nodeValue","log","needCallback","$this","apply","needCallback$1","resolve","idle","requestIdleCallback","updateArray","valueOfState","$firstElement","listDom","indexItem","createDom","e","_e","before","bindData","textDom","textFiber","insertEventDom","Text","onDestroy","isRended","putAfter","elRef","elTarget","isforced","rendLater","p","JSON","stringify","error","updateDataBinding","destroyList","onReady","dispatchReady","dispatchConnected","isReady","defineProperties","model","isClean","writable","listOfTagPriority","render","element","container","document","body","querySelector","returnDom","txtRef","shadowRoot","createTextRef","appendChild","toLowerCase","isRendPriority","async","init","fiber","flat","Infinity","EventTarget","sendListOfDom","list","component","defaultProps","createElement","doc","childDom","rending","all","HTMLElement","globalData","counterName","setOneAttribute","listOnCleanup","domEl","attrN","HTMLSelectElement","multiple","setAttr","rendAttribute","onRemove","redOneStyle","oldVal","toClean","resultReg","rcState","res","applyCallback","removeEv","rmv","Number","modif","selectedIndex","opt","target","checked","styleDefault","style","cssText","rendStyle","rendClass","addValue","_value","classList","removeValue","rmvAttr","insertAttr","inertAttr","when","rmAt","clean","removeAttribute","createChild","listTagEmpty","listTagKnown","regExpHtmlTagSave","regExpHtmlTagFullCapture","regStringValidHtmlSaved","regAttributeName","regAttrWithQuotesSaved","regExpAttrWithQuotes","regAttrWithApostropheSaved","regExpAttrWithApostrophe","regAttrWithBackticSaved","regExpAttrWithBacktic","regAttrWithNoDelimiterSaved","regExpAttr","isOpenTag","htmlTag","isClosingTag","parseAttrString","attrString","directive","names","parseHtmlTag","isAutoClose","isTagEmpty","isTagKnown","initType","rxRefs","parseResult","rxReform","fiberList","htmlStringSplited","dataBinding","getChildren","listT","t","isComment","c","createComment","count","tag","rcRef","innerText","parseHtmlString","htmlString","htmlArray","fasteSplitHtmlString","html","template","strings","config","htmlstring","_str","rcNode","Fragment","TextElement","createFiber","LinksOfDataInTemplateString","RcHtmlNode","RcHtmlText","RcHtmlFragment","RcHtmlElement","tagName","renderCallback","_defaultProps","CLASSElement","observedAttributes","attributeChangedCallback","oldV","newV","delegatesFocus","slotAssignment","connectedCallback","disconnectedCallback","adoptedCallback","mounted","rv","$component","ob","customElements","define","extends"],"mappings":"mCAAA,MAAMA,EAAUC,GAAKA,EACfC,EAAcC,OAAO,WACrBC,GAAYC,GAAuB,iBAAPA,GAAoBH,IAAgBG,EAAI,YAAYC,OAC/E,MAAMC,EACLC,cAAY,OAAOC,MAAMD,QAAQE,KAAKC,MAAQ,CAClDC,WAAa,OAAOC,OAAOH,KAAKC,MAAQ,CACxCG,UAAY,OAAOJ,KAAKC,KAAO,CAC1B,eAAe,OAAOT,CAAa,CACxCa,eAAiBX,EAErB,SAASY,EAAYL,EAAOM,GACxB,IAAIC,EACAC,EACAC,GAAc,EACdC,EAAW,EACf,MAAMC,EAAKC,KAAKC,SACVC,EAAS,GACTC,EAAiB,IAAIC,IACrBC,EAAgB,IAAID,IACpBE,EAAQ,CAAE,EAGhB,OAAOC,OAAOC,OAAO,kBAA2BxB,EACxCyB,aAAW,MAAO,IAAIP,EAAS,CAC/BL,kBAAgB,OAAOA,CAAa,CACpCa,SAAO,OAAOX,CAAI,CAClBY,UAAQ,MAAO,CAACC,SAASP,EAAcQ,KAAKC,UAAUX,EAAeU,KAAKf,aAAa,CAC3FiB,SAASrB,GACL,KAAMA,aAAiBsB,UAAW,MAAO,KACzC,QAAMC,EAAW,IAAIC,IAAMxB,KAASwB,GAC9BC,EAAYjB,EAAOkB,KAAKH,GAAY,EAC1C,IAAII,GAAY,EAChB,MAAO,KACH,GAAIA,EAAW,OAAO,EACtB,GAAInB,EAAOiB,KAAeF,EAGtB,OAFAf,EAAOoB,OAAOH,EAAW,GACzBE,GAAY,GACL,EAEX,MAAME,EAAIrB,EAAOsB,MAAKC,GAAMA,IAAOR,IACnC,OAAIM,GAAK,IACLrB,EAAOoB,OAAOC,EAAG,IACV,EAEJ,CAEd,CAEDG,MAAMC,GAAU,GACZxB,EAAeyB,SAAQH,GAAMA,EAAGE,KAChCxB,EAAeuB,QACfrB,EAAcqB,OACjB,CACDG,QAAQF,GAAU,GACV9B,IACJV,KAAKuC,MAAMC,GACX9B,GAAc,EACjB,CAEDe,UAAW,CAAEkB,EAAiBC,GAAc,KACxC,GAAID,aAA2B9C,EAAS,CACpC,MAAMiC,EAAWc,aAAuBf,SAAWe,EAAcrD,GAAKA,EAChEsD,EAAMF,EAEZ,IAAIT,EACJ,OAFAvB,IAEOX,KAAKyB,UAAS,IAAIqB,KACrBD,EAAME,KAAI,IAAMjB,KAAYgB,OAAUA,EAAKE,MAAM,IAC1C,KACAd,IACHA,GAAU,EACVvB,IAAY,KAEjB,EACN,CACD,KAAMgC,aAA2Bd,UAAW,MAAM,IAAIoB,MAAM,mCAC5D,MAAMC,EAAK,CACPC,SAAUR,EAAiBD,QAASE,EAAcD,EAAgB3C,KAAKC,WAAOmD,EAAW,CAAEC,QAAS,MAAOpD,MAAOD,KAAKC,aAAWmD,GAEhIE,EAAa,IAAIC,IAAQL,EAAGR,QAAUQ,EAAGC,YAAYI,GAC3D,IAAIC,GAAW,EACf,MAAMd,EAAU,IAAIa,KACZC,IACJA,GAAW,EACPN,EAAGR,mBAAmBb,UAAUqB,EAAGR,WAAWa,GAClDvC,EAAeyC,OAAOf,GACtBxB,EAAcuC,OAAOH,GAAW,EAIpC,OAFApC,EAAcwC,IAAIJ,GAClBtC,EAAe0C,IAAIhB,GACZA,CACV,GAAE9C,OACH+B,WAAcG,IACV,KAAMA,aAAoBD,UAAW,MAAM,IAAIoB,MAAM,mCAGrD,OADAjC,EAAe0C,KADN,IAAIZ,IAAOhB,KAAYgB,KAEzB,IAAM9B,EAAeyC,OAAO3B,EACtC,GAAElC,OAGC+D,eAAa,OAAOlD,CAAiB,CAEzCmD,YAAY3D,EAAOM,EAAQhB,IAAKA,IAW5B,GAVAsE,QACAzC,OAAO0C,eAAe9D,KAAM,QAAS,CACjC+D,KAAK,IAAOvD,GAAqBZ,OACjCmD,KAAO9C,GAAUD,KAAK+C,IAAI9C,IAAQL,OAClCoE,YAAY,IAEbzD,GAAuB,iBAARA,IACda,OAAO6C,OAAO9C,EAAQZ,EAAM2D,SAAS,CAAA,GACrC3D,EAAMA,EAAMA,OAAQ,CAAAhB,GAAKA,MAEvBgB,aAAiBsB,UAAW,MAAM,IAAIoB,MAAM,gCAClDzC,EAAsBP,EACtBc,EAAOkB,KAAK1B,GACZ,MAAM4D,EAAa,CAAClE,EAAO0D,EAAWlD,EAAiB2D,EAAS,MAC5D,MAAMC,EAAY,GAClB,OAAOtD,EAAOuD,aAAY,CAACC,EAAKjF,KAC5B+E,EAAUpC,KAAKsC,GACRjF,EAAQiF,EAAKZ,EAAUS,EAAQ,IAAIC,MAC3CpE,EAAK,EAENA,aAAiBuE,UACnBhE,EAAsB2D,EAAWlE,OAAOmD,EAAW,CAAA,IAEvD,MAAMqB,EAAsB,CAAC3C,EAAW,KAAMtB,GAAqBkE,EAAe,GAAInE,EAAQhB,IAAKA,MAC/F,KAAMuC,aAAoBD,UAAW,MAAM,IAAIoB,MAAM,mCACrD,GAAIvC,EAAa,MAAM,IAAIuC,MAAM,mEACjC,MAAM0B,EAAiBD,IAAe3E,MAAMD,QAAQ4E,IAAoC,iBAAdA,EAAwBA,EAAa,CAAE,EAEjH,GADAA,EAAa3E,MAAMD,QAAQ4E,GAAcA,EAAaC,EAAgBD,cAAc,IAC/E3E,MAAMD,QAAQ4E,GAAe,MAAM,IAAIzB,MAAM,oCAClD,MAAM2B,EAAS,CAACR,EAAS,CAAA,IAAOtC,EAAStB,EAAqBC,EAAiB2D,GACzES,EAAY,CAACtE,WAASoE,IACrB9B,EAAOiC,GAAYC,EAASH,IAAUC,GAC1CA,EAAYtE,QAAQA,GAAMsC,EAAMjB,SAASrB,GAC5C,MACMyE,EADS,CAAChF,QAAS0E,GACFO,KAAIC,IACvB,GAAIA,aAAcrF,EACd,OAAOqF,EAAGzD,UAAS,CAAC0D,EAAIC,EAAIhB,KACxBU,EAASF,EAAOR,GAASA,GAClB,KAAOvB,EAAMnC,aAAemC,EAAMH,SAAQ,KAExD,IAGL,OADAG,EAAMlB,WAAU,IAAMqD,EAAQC,KAAI3C,GAAMA,aAAcT,UAAYS,QAC3DO,GAEX7C,KAAK+D,KAAM,CAAEjC,EAAW,KAAM9B,KAAKC,OAAOyE,EAAe,KAAOD,EAAoB3C,EAAU4C,IAAe9E,OAC7GwB,OAAOiE,QAAQC,GAAWL,KAAI,EAAEM,EAAMC,KAAaxF,KAAK+D,IAAIwB,GAAQ,CAACzD,EAAW,KAAM9B,KAAKC,OAAOyE,EAAe,KAAOD,EAAoB3C,EAAU4C,EAAcc,KACpKxF,KAAK+C,KAAM,CAAE9C,EAAOmE,EAAS,CAAEf,QAAS,MAAOpD,MAAOA,MAClD,GAAIS,EAAa,MAAM,IAAIuC,MAAM,mEACjC,GAAqB,iBAAVmB,EAAoB,MAAM,IAAInB,MAAM,8BAC/C,GAAIhD,aAAiBuE,QACjB,OAAOvE,EAAMwF,MAAKlG,GAAKS,KAAK+C,IAAIxD,KAEhCU,aAAiBJ,IAASI,EAAQA,EAAMA,OACxCA,aAAiB4B,WAAU5B,EAAQA,EAAMO,EAAqBC,IAClE,MAAMiF,EAAYlF,EAOlB,OANIkF,IAAczF,IACdA,EAAQkE,EAAWlE,EAAOyF,EAAWtB,GACrC3D,EAAkBiF,EAClBlF,EAAsBP,EA7If,CAACmE,IAAalD,EAAcuB,SAAQH,GAAKA,EAAG9B,EAAqBC,EAAiB2D,IAAO,EA8IhGuB,CAAevB,IAEZ5D,CACV,GAAEZ,OAwCf,SAA4BgG,GAAcnB,oBAAEA,IACxC,MAAM5B,EAAQ+C,EACR9F,EAAU,KACZ,IAAK+C,EAAM/C,QAAS,MAAM,IAAImD,MAAM,2EAA0E,EAE5G4C,EAAc/D,IAChB,KAAMA,aAAoBD,UAAW,MAAM,IAAIoB,MAAM,uCAAsC,EAEzF6C,EAAYC,IAOd,GANIA,aAAiBlG,IACjBkG,EAAQA,EAAM9F,OAEd8F,aAAiBlE,WACjBkE,EAAQlD,EAAM5C,MAAM+F,UAAUD,IAE9BE,MAAMF,GAAQ,MAAM,IAAI9C,MAAM,qEAClC,OAAO8C,GAEXlD,EAAMkB,IAAIkB,IAAOnD,IACb+D,EAAW/D,GACX,MAAMxB,EAAc,CAACf,EAAG6C,IAAM,CAAC2C,EAASxF,GAAG,GAAIwF,EAAS3C,GAAG,IACrD8D,EAAW3G,GAAMuC,KAAYvC,EAAGsD,GAChCsD,EAAYtD,EAAM5C,MAAMgF,IAAI3E,GAClC,IAAI8F,EAAcD,EAAUlB,IAAIiB,GAChC,MAAOG,EAAOC,GAAYvB,EAASqB,GAC7BxB,EAAS,IAAMuB,EAAUlB,KAAI,EAAE1F,EAAG6C,GAAI2D,KACnC3D,EAAE1B,aAAa0B,EAAEW,IAAIgD,GACrBxG,EAAEmB,aAAanB,EAAEwD,IAAIF,EAAM5C,MAAM8F,GAAO,IAiBjD,OAfAlD,EAAMpB,UAAU8C,IACZ,GAAI4B,EAAUI,OAAShC,EAAIgC,OAAQ,CAC/B,MAAMC,EAAajC,EAAIgC,OACjBE,EAAMN,EAAUI,OACtBJ,EAAUhE,OAAOqE,EAAYC,GAAKxB,KAAIyB,GAAKA,EAAEzB,KAAI7C,GAAKA,EAAEM,SAAQ,OAChE4D,EAASnE,OAAOqE,EAAYC,EAC/B,MAAM,GAAIN,EAAUI,OAAShC,EAAIgC,OAAQ,CACtC,MAAMC,EAAaL,EAAUI,OAC7BJ,EAAUlE,QAAQsC,EAAIvB,MAAMwD,GAAYvB,IAAI3E,IAC5C6F,EAAUlB,KAAI,GAAIc,GAAQ3D,IAAM2D,EAAMhD,IAAIX,KAC1CkE,EAASrE,QAAQkE,EAAUnD,MAAMwD,GAAYvB,IAAIiB,GACpD,CACDtB,GAAQ,IAGLyB,GAEXxD,EAAMkB,IAAIjC,SAAYA,IAClB,KAAMA,aAAoBD,UAAW,MAAM,IAAIoB,MAAM,mCACrD,OAAOJ,EAAMkB,KAAI,IAAMjC,GAAQ,EAEnC,MAAM6E,EAAS,CAAC7D,EAAM6D,KAElB,GADA7G,IACI+C,EAAM5C,MAAM0G,aAAmB9E,SAAU,CACzC,MAAM+E,EAAc/D,EAAM5C,MAAM0G,MAAW7D,GAC3C,OAAOD,EAAME,IAAI,IAAIF,EAAM5C,OAAQ,CAAEoD,QAAS,MAAOsD,SAAQ7D,OAAM8D,eACtE,GAKL/D,EAAME,IAAIZ,OAAS,IAAIW,IAAS6D,EAAO,IAAI7D,GAAO,UAClDD,EAAME,IAAI8D,OAAS,CAACC,EAAOC,EAAc,KACrC,MAAMH,EAAc/D,EAAM5C,MAAMkC,OAAO2E,EAAOC,GAC9C,OAAOlE,EAAME,IAAI,IAAIF,EAAM5C,OAAQ,CAAEoD,QAAS,MAAOsD,OAAQ,SAAU7D,KAAM,CAACgE,EAAOC,GAAcH,eAAa,EAEpH/D,EAAME,IAAIiE,KAAO,CAACjB,EAAO9F,KAGrB,GAFAH,KACAiG,EAAQD,EAASC,KACJ,EAAG,CACR9F,aAAiB4B,WACjB5B,EAAQA,EAAM4C,EAAM5C,MAAM8F,GAAQA,EAAOlD,EAAM5C,QAEnD,MAAM2G,EAAc/D,EAAM5C,MAAMkC,OAAO4D,EAAO,EAAG9F,GACjD,OAAO4C,EAAME,IAAI,IAAIF,EAAM5C,OAAQ,CAAEoD,QAAS,MAAOsD,OAAQ,OAAQ7D,KAAM,CAACiD,EAAO9F,GAAQ2G,eAC9F,GAEL/D,EAAME,IAAId,KAAO,IAAIoE,IAAUM,EAAO,IAAIN,GAAQ,QAClDxD,EAAME,IAAIkE,IAAM,IAAMN,EAAO,GAAI,OACjC9D,EAAME,IAAImE,MAAQ,IAAMP,EAAO,GAAI,SACnC9D,EAAME,IAAIoE,QAAU,IAAId,IAAUM,EAAO,IAAIN,GAAQ,SACrDxD,EAAME,IAAIqE,QAAU,IAAMT,EAAO,GAAI,WACrC9D,EAAME,IAAIsE,KAAO,IAAIhB,IAAUM,EAAO,IAAIN,GAAQ,QAClDxD,EAAME,IAAIuE,OAAS,CAACC,KAAczE,KAC9BhD,IACA+F,EAAW0B,GACX,MAAMX,EAAc/D,EAAM5C,MAAMqH,OAAOC,KAAczE,GACrD,OAAOD,EAAME,IAAI6D,EAAa,CAAEvD,QAAS,MAAOsD,OAAQ,SAAU7D,KAAM,CAACyE,KAAczE,GAAO8D,eAAa,EAE/G/D,EAAME,IAAIC,MAAQ,IAAIF,KAClBhD,IACA,MAAM8G,EAAc/D,EAAM5C,MAAM+C,SAASF,GACzC,OAAOD,EAAME,IAAI6D,EAAa,CAAEvD,QAAS,MAAOsD,OAAQ,QAAS7D,OAAM8D,eAAa,EAExF/D,EAAME,IAAIyE,KAAO,CAACC,EAAY,EAAC1F,EAAG2F,IAAMA,EAAI3F,MACxCjC,IACA+F,EAAW4B,GACX,MAAM9D,EAAWd,EAAM5C,MAAM+C,QACvB4D,EAAc/D,EAAM5C,MAAMuH,KAAKC,GACrC,OAAIb,EAAYe,OAAM,CAACC,EAAM7B,IAAU6B,IAASjE,EAASoC,KAAgBlD,EAAM5C,MACxE4C,EAAME,IAAI6D,EAAa,CAAEvD,QAAS,MAAOsD,OAAQ,OAAQ7D,KAAK+E,UAAWjB,eAAa,EAEjG/D,EAAME,IAAIkC,IAAM,CAAC6C,EAAYC,EAAUlF,EAAM5C,SACzCH,IACA+F,EAAWiC,GACX,MAAMlB,EAAc/D,EAAM5C,MAAMgF,IAAI6C,KAAehF,MACnD,OAAOD,EAAME,IAAI6D,EAAa,CAAEvD,QAAS,MAAOsD,OAAQ,MAAO7D,UAAM8D,eAAa,CAE1F,CAlJYoB,CAAmBhI,KAAM,CAAEyE,wBAC3BrD,OAAOiE,QAAQlE,GAAS8D,KAAI,EAAEgD,EAAE1I,KAAKS,KAAK+C,IAAIkF,GAAGC,GAASlI,KAAK+C,IAAIxD,aAAasC,SAAUtC,EAAEiB,EAAoB0H,GAAS3I,KACrHU,aAAiBuE,SACjBvE,EAAMwF,MAAKlG,GAAKS,KAAK+C,IAAIxD,IAEhC,GAEFU,EAAOM,GACd,CACA,MAAM+E,EAAY,CACd6C,MAAM5I,GACF,IAAKQ,MAAMD,QAAQP,GAAI,MAAM,IAAI0D,MAAM,uCACvC,OAAO1D,CACV,EACD6I,OAAO7I,GACH,GAAgB,iBAALA,EAAe,MAAM,IAAI0D,MAAM,wCAC1C,OAAO1D,CACV,EACD8I,OAAO9I,GACH,GAAgB,iBAALA,EAAe,MAAM,IAAI0D,MAAM,wCAC1C,OAAO1D,CACV,EACD+I,SAAS/I,GACL,GAAgB,mBAALA,EAAiB,MAAM,IAAI0D,MAAM,0CAC5C,OAAO1D,CACV,EACDgJ,QAAQhJ,GACJ,GAAgB,kBAALA,EAAgB,MAAM,IAAI0D,MAAM,yCAC3C,OAAO1D,CACV,EACDiJ,OAAOjJ,GACH,GAAgB,iBAALA,EAAe,MAAM,IAAI0D,MAAM,wCAC1C,OAAO1D,CACV,EACDkJ,OAAOlJ,GACH,GAAgB,iBAALA,EAAe,MAAM,IAAI0D,MAAM,wCAC1C,OAAO1D,CACV,GA+GU,SAASwF,EAAS9E,EAAOM,EAAQjB,GAU5C,OATIW,aAAiBJ,EAEbU,aAAiBsB,UAAYtB,IAAUjB,GAASW,EAAM2B,SAASrB,GAC5DR,MAAMD,QAAQG,IAAUA,EAAM,aAAcJ,GAAWI,EAAM,KAAOA,EAAM,GAAG8C,KACpF9C,EAAQA,EAAM,GACVM,aAAiBsB,UAAYtB,IAAUjB,GAASW,EAAM2B,SAASrB,IAEnEN,EAAQK,EAAYL,EAAOM,GAExB,CAACN,EAAOA,EAAM8C,IACzB,CAGA3B,OAAOiE,QAAQC,GAAWL,KAAI,EAAEM,EAAMhF,KAAWwE,EAASQ,GAAStF,GAAU8E,EAAS9E,EAAOM,KAC7FwE,EAASrF,QAAUA,ECxUnB,MAAMgJ,EAAUjJ,OAAO,SACR,SAASkJ,EAAO1I,GAC3B,MAAON,EAAKiJ,GAAa7D,EAAS9E,GAC5B4I,EAAOzH,OACb,OAAOyH,EAAOxH,OAAO,IAAK,MACtBuC,cACIiF,EAAO/E,eAAe9D,KAAK,UAAU,CACjC+D,KAAI,IAAKpE,EAAIM,OAAOL,OACpBmD,KAAMwB,GAAMqE,EAAUrE,IAAM3E,OAC5BoE,YAAW,EACX8E,cAAa,IAEjBD,EAAO/E,eAAe9D,KAAK,WAAW,CAClCC,OAAQqC,GAAK3C,EAAI8B,SAASa,IAAK1C,OAC/BoE,YAAW,GAElB,CACDrC,UAAUW,GAAI,OAAO3C,EAAIgC,UAAUW,EAAG,CACtCI,QAAQJ,GAAI,OAAO3C,EAAI+C,SAAQ,EAAK,CACpCK,IAAIT,GAAI,OAAOsG,EAAUtG,EAAG,CACvB,eAAa,OAAOoG,CAAS,GAE1C,CCrBO,SAASK,EAASC,EAAQ,IAC7B,GAAkB,iBAARA,EAAkB,MAAM,IAAI/F,MAAM,8BAC5C,MAAO,IACA7B,OAAOiE,QAAQ2D,GAAOC,QAAO,CAACC,GAAOC,EAAKlJ,MAAY,IAAKiJ,EAAMC,CAACA,GAAe,aAARA,GAAsBA,EAAIC,WAAW,MAAcrE,EAASrF,QAAQO,GAAxBA,EAAwC8E,EAAS9E,GAAO,MAAO,CAAA,GAE/L,CDiBA0I,EAAOU,OAAQ1J,GAAmB,iBAALA,GAAgB+I,IAAY/I,EAAI,YAAYC,OExBzE,MAAM0J,EAAe,CACjBC,eAAgB,IAAIzG,IAAS,IAAIA,GACjC0G,cAAe,CAACC,EAAM7C,IAAgB,CAAC6C,EAAM7C,GAC7C8C,YAAa5H,GAAYA,EACzB6H,wBAAuB,GAEpB,SAASC,EAASC,EAAUP,GAC/B,GAAuB,iBAAZO,EAAsB,MAAM,IAAI5G,MAAM,+BACjD,MAAMsG,eAAEA,EAAeD,EAAaC,eAAcC,cAAEA,EAAcF,EAAaE,cAAaE,YAAEA,EAAYJ,EAAaI,YAAWC,uBAACA,EAAuBL,EAAaK,wBAA0BE,EAC3LC,EAAS,IAAI7I,IAOnB,MAAO,CANYa,IACf,KAAMA,aAAoBD,UAAW,MAAM,IAAIoB,MAAM,kCAGrD,OAFAnB,EAAW4H,EAAY5H,cACCD,UAAUiI,EAAOpG,IAAI5B,GACtC,IAAMgI,EAAOrG,OAAO3B,EAAQ,EAEpB,CAAC2H,KAAQM,KACxB,MAAMjH,EAAOyG,EAAeE,KAAQM,GAC9BnD,EAAckD,EAAOrH,SAAQH,GAAMA,OAASvC,MAAMD,QAAQgD,GAAMA,EAAK,CAACA,MAE5E,OADG6G,GAAuBG,EAAOvH,QAC1BiH,EAAcC,EAAM7C,EAAW,EAE9C,CCpBO,SAASoD,EAAQlI,EAAUmI,EAAS,IACvC,IAAKlK,MAAMD,QAAQmK,GAAS,MAAM,IAAIhH,MAAM,8BAC5C,MAAMiH,EAAU,IACTrH,EAAMiC,GAAUC,IACjBoD,EAAQ,IAAI8B,GACZE,EAAWzD,GAAKA,aAAa7G,EAAU6G,EAAEzG,MAAQyG,EACjD9B,EAAOxC,GAAI0C,EAAShD,EAAS,IAAIqG,EAAMlD,IAAIkF,IAAW/H,IAQ5D,OAPA+F,EAAM1F,SAAQ,CAACyC,EAAI9C,KACX8C,aAAcrF,GACdqK,EAAQjI,KAAKiD,EAAGzD,UAAS,KAAOmD,EAAOxC,EAAE,IAC5C,IAELwC,GAAQ,GACR/B,EAAMlB,WAAU,IAAIuI,EAAQ/H,OAAO,EAAE+H,EAAQ3D,QAAQtB,KAAI3C,GAAMA,UACxDO,CACX,CCJO,SAASuH,KAA0BC,GACtC,OAAO,IAAIC,OAAO,MAPf,YAA0BD,GAC7B,OAAOA,EAAKpB,QAAO,CAACsB,EAASC,IAAM,IAAIF,OAAOC,EAASE,OAJ3D,SAAsBD,GAClB,MAAmB,iBAALA,EAAcA,EAAIA,EAAIC,MACxC,CAEkEC,CAAaF,KAC/E,CAK4BG,IAAiBN,GAAMI,UACnD,CACO,SAASG,KAAqBP,GACjC,OAAO,IAAIC,OAAO,IAhBf,YAAyBD,GAC5B,OAAOA,EAAKpB,QAAO,CAACsB,EAASC,IAAM,IAAIF,OAAOC,EAASE,OAAOD,EAAIC,SACtE,CAc0BI,IAAgBR,GAAMI,UAChD,CACO,SAASK,KAAqBT,GACjC,OAAOO,EAAkBP,EAAKpB,QAAO,CAACsB,EAASC,IAAM,IAAIF,OAAOC,EAASE,OAAO,IAAID,EAAIC,UAC5F,CCnBO,MAAMM,UAAoBhL,MAClBiL,oBAAW,MAAO,kDAAoD,CACtEC,yBAAgB,MAAO,qEAAuE,CAC9FC,0BAAiB,MAAO,sEAAwE,QAEvGlL,KAAKmL,MAAQ,SAAUC,EAAS,GAAIC,GAAiB,GACjD,GAAqB,iBAAVD,EAAoB,MAAM,IAAInI,MAAM,4CAC/C,MAAMuH,EAAMa,EAAiBP,EAAkB9K,KAAKgL,QAAUhL,KAAKgL,OAQnE,OAPeI,EAAOD,MAAMX,GAAKvB,QAAO,CAACqC,EAAG1D,KACxC,IAAKA,EAAM,OAAO0D,EAClB,MAAMC,EAAIvL,KAAKwL,MAAM5D,GAGrB,OAFI2D,GAAKF,aAA0BxJ,WAAU+F,EAAOyD,EAAeE,IACnED,EAAErJ,KAAK2F,GACA0D,IACR,GAEN,EACDtL,KAAKyL,WAAa,SAAUL,EAAQnL,EAAQ,IACxC,GAAqB,iBAAVmL,EAAoB,MAAM,IAAInI,MAAM,4CAC/C,OAAOmI,EAAOK,WAAWzL,KAAKkL,cAAc,CAACQ,EAAO3F,EAAOR,IAAStF,aAAiB4B,SAAW5B,EAAM,CAAEyL,QAAO3F,QAAOR,SAAUtF,GACnI,EACDD,KAAKwL,MAAQ,SAAUJ,EAAS,GAAIO,EAAO,MACvC,GAAqB,iBAAVP,EAAoB,MAAM,IAAInI,MAAM,4CAC/C,MAAM2I,EAAS,sEAAsEC,KAAKT,GACpFnL,EAAQ0L,EAAO3L,KAAKmL,MAAMC,GAAQ,EAAGrF,WAAY4F,EAAK5F,KAAU,KAChE+F,EAAc7L,EAAQA,EAAM8L,KAAK,IAAM,GAC7C,OAAOH,EAAS,CACZ7F,MAAO6F,EAAOI,OAAOjG,MACrBR,KAAMqG,EAAOI,OAAOzG,KACpBmG,MAAOE,EAAOF,MACdzL,QAAO6L,cAAaH,QACpB,IACP,CACJ,CACD/H,eAAe+H,GACX9H,QACA7D,KAAKiC,QAAQ0J,GACb3L,KAAKiM,WAAW,CAAE,CACrB,ECrCL,MAAMC,EAAyB,CAAE,EAG3BC,EAAkB,CACpBC,GAAI,KACJC,SAAU,GACVC,UAAW,GACXC,cAAe,GACfhJ,IAAK,GACLiJ,UAAW,CAAE,EACbzG,MAAO,GAEJ,MAAM0G,EACTR,GAAe,IAAKC,GAChBD,iBAAe,OAAOjM,MAAKiM,CAAa,CACxCA,eAAWA,GACX7K,OAAO6C,OAAOjE,MAAKiM,EAAaA,EACnC,CACDN,KAAO,IAAIZ,EACX2B,WAAa,CACTC,SAAQL,UAAEA,EAASF,GAAEA,GAAMD,IACvBG,EAAUA,aAAqBzM,EAAQyM,EAAUrM,MAAMqM,aAC/BzK,SACpBuK,EAAGzK,UAAU2K,EAAUF,GAG3BQ,QAAQC,KAAK,+CAChB,EACDC,aAAYR,UAAEA,EAASF,GAAEA,EAAE7I,IAAEA,GAAQ4I,GACjC,MAAMY,EAA8B,CAAC,UAAW,QAAS,aAAc,OAAQ,MAAO,SAAU,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,SAAU,OAAQ,MAAO,IAAK,UAAW,QAC7K,GAAIA,EAA4BC,SAASZ,EAAGa,YAAcb,EAAGa,UAAUD,SAAS,KAAM,CAClF,IAAIlL,EACAwK,aAAqBzM,IAASyM,EAAYA,EAAUrM,OACpDqM,aAAqBzK,WAAUC,EAAWwK,GAC9C,MAAMY,EAAc,IAAId,EAAGe,YACrBC,EAAOhB,EAAGiB,aAAa,CAAEC,KAAc,WAAR/J,EAAmB,SAAW,SAC7DqD,EAAc9E,aAAoBD,SAAWC,EAAS,CAAEsK,KAAIgB,OAAMG,SAAUL,IAAiBA,EAC7FK,EAAWxN,MAAMD,QAAQ8G,GAAeA,EAAc,CAACA,GAC7DwF,EAAGoB,UAAY,GACfJ,EAAKK,UAAUF,EAC/B,MACgBX,QAAQC,KAAK,aAAaT,EAAGa,mMACeF,EAEnD,EACDW,YAAWpB,UAAEA,EAASF,GAAEA,EAAEuB,aAAEA,GAAiBxB,GACzC,IAAIyB,EACJ,GAAItB,aAAqBzM,EAAS,CAC9B,MAAM+E,EAAS,CAACiJ,EAAM5N,KACd2N,aAAmB/L,UAAU+L,IACjCA,EAAUD,EAAavB,EAAIyB,EAAM5N,GAAS,GAAG,EAEjD,OAAOqM,EAAU7K,UAAS,CAACxB,EAAO0D,KAC9B,GAAI1D,GAAyB,iBAATA,EAChB,GAAI0D,GAA+B,iBAAZA,EAAsB,CACzB1D,EAAMoM,WAAa1I,EAAS0I,UAAYpM,EAAMqM,YAAc3I,EAAS2I,WAEjF1H,EAAO3E,EAAMoM,SAAUpM,EAAMqM,WAAa,GAE1E,MAC4B1H,EAAO3E,EAAMoM,SAAUpM,EAAMqM,WAAa,SAG9C1H,EAAO3E,EAAO,IAElB,OAAO2N,KACR,EACN,CACD,OAAOD,EAAavB,EAAIE,GAAW,EACtC,EACDwB,KAAIxB,UAAEA,EAASF,GAAEA,EAAErG,MAAEA,EAAK0D,KAAEA,EAAMlG,IAAAA,GAAO4I,GACrCpG,EAAQlF,KAAKC,SACoB,iBAAtB2I,EAAKsE,gBAA2BtE,EAAKsE,cAAgB,CAAE,GAClE,MAAM5D,EAAYlK,GAAUA,aAAiB4B,SAAW5B,EAAMmM,KAAQnM,EAChE+N,EAAY,IAAI5M,OAAO6M,OAAOxE,EAAKsE,eAAepG,OAAMuG,GAAUA,IAClEC,EAAc,CAACC,EAAYJ,MAAkB5B,EAAGiC,cACjD5I,MAAK6I,GACEA,EAAQC,WAGLD,EAAQC,YAAcH,EAAYE,EAAQE,MAAMpC,GAAMA,EAAGvF,SAFrDuF,EAAGqC,aAAY,IAAIrC,EAAGiC,cAAc5I,MAAK,IAAIuI,IAAgBM,EAAQE,MAAMpC,GAAMA,EAAGvF,eAIvG,OAAIyF,aAAqBzM,EACdyM,EAAU7K,UAAUxB,IACvB,MAAMV,EAAE4K,EAASlK,GAGjB,OAFAwJ,EAAKsE,cAAchI,GAAa,SAALxC,GAAchE,EAAEA,EAC3C4O,IACO,YACI1E,EAAKsE,cAAchI,GAC1BuG,EAAU5J,SAAQ,EAAK,CAC1B,IACF,IAEH+G,EAAKsE,cAAchI,GAASoE,EAASmC,GACrC6B,IAEG,IAAM1E,EAAKsE,cAAchI,IAAS,EAC5C,EACD2I,MAAKtC,GAAEA,EAAEE,UAAEA,GAAcH,GAIrB,GAHIG,aAAqBzM,IACrByM,EAAUA,EAAUrM,OAEpBqM,aAAqBzK,SACrB,OAAOyK,EAAUF,GACXzD,EAAOU,MAAMiD,KACnBA,EAAUqC,QAAQvC,EAEzB,EACDwC,OAAQxC,GAAIyC,EAAGvC,UAAEA,GAAcH,GAC3B,GAAIG,aAAqBzM,EACrB,OAAOyM,EAAU7K,UAAUqN,IACvBD,EAAIE,QAAUD,EACP,IAAMxC,EAAU5J,SAAQ,MAChC,GAEHmM,EAAIE,QAAUzC,CAErB,EACD0C,OAAM5C,GAAEA,EAAE7I,IAAEA,EAAGiJ,UAAEA,EAASF,UAAEA,GAAcH,GACtC,MAAM8C,EAAS,GACX3C,aAAqBzM,GACrBoP,EAAOhN,KAAKqK,EAAU7K,UAAUlC,IACxBgE,KAAO6I,EACPA,EAAG7I,GAAOhE,EAEV6M,EAAGuB,aAAapK,EAAKhE,GAElB,IAAM+M,EAAU5J,SAAQ,MAChC,IAEP,MAAM4G,EAAe,KACjB,MAAMrJ,EAAQsD,KAAO6I,EAAKA,EAAG7I,GAAO6I,EAAG8C,aAAa3L,GAChD+I,aAAqBzM,GAASyM,EAAUvJ,IAAI9C,EAAM,EAM1D,GAJAgP,EAAOhN,QAAQb,OAAO+N,KAAK3C,GAAWvH,KAAImK,IACtChD,EAAGiD,iBAAiBD,EAAW9F,GACxB,IAAM8C,EAAGkD,oBAAoBF,EAAW9F,OAEd,GAAjClI,OAAO+N,KAAK3C,GAAWjG,OAAa,CACpC,MAAM6I,EAAY,CAAC,SAASpC,SAASZ,EAAGa,WAAa,QAAU,SAC/Db,EAAGiD,iBAAiBD,EAAW9F,GAC/B2F,EAAOhN,MAAK,IAAMmK,EAAGkD,oBAAoBF,EAAW9F,IACvD,CACD,MAAO,IAAM2F,EAAOhK,KAAI3C,GAAMA,KACjC,EACDiN,aAAYnD,GAAEA,EAAE7I,IAAEA,EAAGiJ,UAAEA,EAASF,UAAEA,GAAcH,GACxCG,aAAqBzM,IAASyM,EAAYA,EAAUrM,OAChC,iBAAbqM,GACPlL,OAAO6C,OAAOjE,KAAMsM,EAE3B,GAELkD,UAAU7D,EAAO3L,KAAK2L,MAClB,KAAMA,aAAgBZ,GAAc,MAAM,IAAI9H,MAAM,sCACpD,MAAMwM,EAAU,EAAG1J,WAAY/F,KAAK2L,KAAK5F,GACnC2J,EAAc,CAACjG,EAAMN,KAOvB,GAAIA,KAAOM,EAAM,CACb,GAAIN,EAAI6D,SAAS,MAAQ7D,EAAI6D,SAAS,MAAsB,KAAd7D,EAAIwG,IAAI,GAAW,CAC7D,MAAMC,EAASzG,EAAI0G,QAAQ,KAC3B1G,EAAMA,EAAInG,MAAM,EAAG4M,EACtB,CACD,MAXO,MACP,IAAIxN,EAAIvB,KAAKiP,MAAsB,IAAhBjP,KAAKC,UACxB,KAAQqI,EAAM,IAAI/G,OAASqH,GAAQrH,IAEnC,OADA+G,GAAO,IAAI/G,IACJ+G,EAOA4G,EACV,CACD,OAAO5G,GAEXnJ,KAAKgJ,MAAQ5H,OAAOiE,QAAQrF,KAAKgJ,OAAOC,QAAO,CAACD,GAAQqD,EAAUpM,MAE9D,MAAM+P,EAAmBjF,EAAYS,MAAMa,EAAUrM,KAAK2L,MACpDsE,EAA6B,iBAAThQ,EAAoB8K,EAAYI,MAAMlL,GAAS,GAAIwP,GAAW,CAACxP,IAGrF,QAAQiQ,KAAKD,EAAW,KAASA,EAAW,aAAcpQ,GAAUoQ,EAAW/I,SAC/E,QAAQgJ,KAAKD,EAAWN,IAAI,KAASM,EAAW,aAAcpQ,GAAUoQ,EAAWhJ,MAEvF,IACIkJ,EADAC,GAAgB,EAEpB,MAAMjG,EAAW,KACb,GAAIiG,EAAe,OAAOD,EAE1B,GADAC,GAAgB,EACS,GAArBH,EAAW1J,OAEX,OADA4J,EAAa,GACN,GAEX,GAAyB,GAArBF,EAAW1J,OAEX,OADA4J,EAAaF,EAAW,GACjBA,EAAW,GAEtB,MAAMI,EAAarG,GAAQ,IAAMiG,EAAWlE,KAAK,KAAMkE,GAEvD,OADAE,EAAaE,EACNA,GAEX,GAAIL,EAAkB,CAClB,IAAIM,GAAc,EAClB,MAAMC,IAAaP,EAAiB/P,MAAMoC,MAAK9C,IACvCA,aAAasC,WACbyO,GAAc,GAEX/Q,aAAaM,KAGlB2Q,EAAa,IAAMxG,GAAQ,KAAO,CACpCqC,SAAU2D,EAAiB/P,MAAMgF,KAAI1F,GAAKA,aAAasC,SAAWtC,EAAEsO,KAAOtO,aAAaM,EAAUN,EAAEW,WAAyB,iBAALX,EAAgBA,GAAGqE,aAAaiK,KAAOtO,IAAGwM,KAAK,IACvKO,UAAWnC,OACX,IAAI6F,EAAiB/P,QAEzB,GANiD,KAA7B+P,EAAiB/P,MAAM,IAAa+P,EAAiB/P,MAAM,aAAc4B,SAM5E,CACb,MAAMC,EAAWkO,EAAiB/P,MAAM,GAClCsB,EAAKV,KAAKiP,MAAsB,IAAhBjP,KAAKC,UACrB2P,GAAoC,KAApB3O,EAAS+L,KAAK,GAAY/L,EAAS+L,KAAO,IAAM/L,EAAS+L,MAAQ,IAAMtM,EAAK,IAClGvB,KAAK0M,WAAW+D,GAAgB3O,EAChC,IAAIqH,EAAM,aACVA,EAAMuG,EAAY1G,EAAOG,GACzB6G,EAAiB/P,MAAM,GAAK,GAC5B+P,EAAiB/P,MAAM,GAAKwQ,EAC5B,MAAMC,EAAOF,IAEb,OADAxH,EAAMG,GAAOuH,EACN1H,CACV,CAAM,GAAIuH,EAAU,CACjB,IAAIpH,EAAM,aACVA,EAAMuG,EAAY1G,EAAOG,GACzB,MAAMuH,EAAOF,IAEb,OADAxH,EAAMG,GAAOuH,EACN1H,CACV,CAAM,GAAIsH,EAAa,CACpB,MAAMK,EAAM,IAAIX,EAAiB/P,OACjC,GAAI0Q,EAAI,aAAc9O,UAA0B,GAAd8O,EAAIpK,OAAa,CAC/C,IAAI4C,EAAM,UAGV,OAFAA,EAAMuG,EAAY1G,EAAOG,GACzBH,EAAMG,GAAOwH,EAAI,GACV3H,CAC/B,CAA2B,CACH,IAAIG,EAAM,IAAI6G,EAAiB/P,OAAOgF,KAAI1F,GAAKA,aAAasC,SAAWtC,EAAEsO,KAAOtO,IAAGwM,KAAK,IAGxF,OAFA5C,EAAMuG,EAAY1G,EAAOG,GACzBH,EAAMG,GAAOgB,IACNnB,CACV,CACrB,CAAuB,GAAIgH,EAAiB/P,MAAM,aAAcmB,QAA4C,IAAlC4O,EAAiB/P,MAAMsG,OAC7E,MAAa,IAATtG,GACA+P,EAAiB/P,MAAM,GAAG2D,cAAgBxC,QAC9CA,OAAOiE,QAAQ2K,EAAiB/P,MAAM,IAAIgF,KAAI,EAAEgD,EAAG1I,MAC/C0I,EAAIyH,EAAY1G,EAAOf,GACvBe,EAAMf,GAAK1I,CAAC,IAJQyJ,EAQxBqD,EAAW2D,EAAiBlE,WAEnC,CACD,IAAI8E,GAAY,EAKhB,MAJgB,KAAbvE,EAAS,KACRuE,GAAY,EACZvE,EAASA,EAASrJ,MAAM,IAEZ,YAAZqJ,GACArD,EAAMuE,SAAWtN,EACV+I,IAEXqD,EAAWqD,EAAY1G,EAAOqD,GAC9BrD,EAAMqD,GAAYuE,EAAY5G,GAAQ,IAAIG,MAAYA,IAC/CnB,KACR,GACN,CACDpF,cAAgB,CAChB2B,KACAyD,MACA6F,GACAgC,GACIA,aAAS,OAAO7Q,MAAK6Q,CAAO,CAC5BA,WAAOC,GACP,KAAKA,aAAuBrE,GAAc,MAAM,IAAIxJ,MAAM,kDAC1DjD,MAAK6Q,EAAQC,CAChB,CACGjC,UACA,OAAO7O,MAAK6O,CACf,CACGA,QAAIkC,GACJ,GAAG/Q,MAAK6O,EAAM,MAAM,IAAI5L,MAAM,+BAC9B,KAAK8N,aAAoBC,MAAO,MAAM,IAAI/N,MAAM,2CAChDjD,MAAK6O,EAAKkC,CACb,EC7RE,MAAME,UAAuBxE,EAChC7I,YAAY2B,EAAMyD,EAAQ,CAAE,EAAE2C,EAAK,IAAIZ,GACnC,KAAMY,aAAgBZ,GAAc,MAAM,IAAI9H,MAAM,sCACpDY,QACA7D,KAAKuF,KAAOA,EACZvF,KAAK2L,KAAOA,EACZ3L,KAAKgJ,MAAQ5H,OAAOC,OAAO,IACpB2H,EACHuE,SAAUvE,EAAMuE,UAAW,KAE/BvN,KAAKgJ,MAAMuE,SAAStI,KAAI,CAACiM,EAAMnL,KACxBmL,aAAiBC,mBAChBnR,KAAKgJ,MAAMuE,SAASxH,GAAO,IAAImL,EAAME,WACxC,IAELpR,KAAKwP,UAAUxP,KAAK2L,MACpB3L,KAAKiM,WAAWjM,KAAK2L,KAAKM,WACvBjM,KAAKiM,WAAW1G,KACfvF,KAAKuF,KAAKvF,KAAKiM,WAAW1G,IAE9BnE,OAAOC,OAAOrB,KACjB,ECrBE,MAAMqR,UAAwB5E,EACjC7I,YAAY2J,EAAU5B,EAAK,IAAIZ,GAC3B,KAAMY,aAAgBZ,GAAc,MAAM,IAAI9H,MAAM,sCACpDY,QACA7D,KAAK2L,KAAOA,EACZ3L,KAAKuF,KAAO,WACZvF,KAAKgJ,MAAQ5H,OAAOC,OAAO,CACvBkM,SAASA,GAAY,KAEzBvN,KAAKwP,UAAUxP,KAAK2L,MACpBvK,OAAOC,OAAOrB,KACjB,ECXE,MAAMsR,UAAoB7E,EAC7B7I,YAAY2N,EAAM5F,EAAK,IAAIZ,GACvB,KAAMY,aAAgBZ,GAAc,MAAM,IAAI9H,MAAM,sCASpD,OARAY,QACA7D,KAAK2L,KAAOA,EACZ3L,KAAKuF,KAAO,OACZvF,KAAKgJ,MAAQ5H,OAAOC,OAAO,CACvBmQ,UAAWD,EACXhE,SAAU,KAEdnM,OAAOC,OAAOrB,MACXA,KAAKgJ,MAAMwI,qBAAqBR,MAC5BhR,KAAKgJ,MAAMwI,qBAAqBL,kBAC/BvE,QAAQ6E,IAAI,IAAIzR,KAAKgJ,MAAMwI,UAAUJ,YAElCpR,KAAKgJ,MAAMwI,WAElBxR,KAAKgJ,MAAMwI,qBAAqB/E,EAAoBzM,KAAKgJ,MAAMwI,eAAnE,CACH,ECfL,MAAME,EAAe,CAAC5P,EAAUgB,EAAM6O,IAAU7P,EAAS8P,MAAMD,EAAO7O,GAC1D+O,EAACrD,MAAQ,CAAC1M,EAAUgB,EAAM6O,IAAUnN,QAAQsN,UAAUrM,MAAK,IAAM3D,EAAS8P,MAAMD,EAAO7O,KACvF+O,EAACE,KAAO,CAACjQ,EAAUgB,EAAM6O,IAAUK,qBAAoB,IAAMlQ,EAAS8P,MAAMD,EAAO7O,KAqR/F,MAAMmP,EAAc,CAChBlP,IAAImP,EAAczR,GAAiB4C,QAAEA,EAAOpD,MAAEA,EAAKqO,QAAEA,EAAOlI,YAAEA,IAC1D,IAAKrG,MAAMD,QAAQsG,GAAc,MAAM,IAAInD,MAAM,mCACjD,IAAKlD,MAAMD,QAAQoS,GAAe,MAAM,IAAIjP,MAAM,oCAElD,GADAqL,EAAQ6D,cAAgB/L,EAAY,GAChC8L,EAAavK,OAAMpI,GAAKA,aAAayR,OAAO,CAC5C,MAAMoB,EAAU,GAChBhM,EAAYjE,OAAO,EAAGiE,EAAYG,UAAW2L,EAAajN,KAAI,CAAC2C,EAAMyK,KACjE,MAAMxD,EAAMyD,EAAU1K,GAUtB,OATiB,GAAbyK,EACI/D,EAAQ6D,gBAAkBtD,IAC1BP,EAAQ6D,cAAgBtD,EACxBP,EAAQE,MAAMK,IAEXzI,EAAYiM,KAAexD,GAClCuD,EAAQzC,IAAI,GAAGnB,MAAMK,GAEzBuD,EAAQnQ,KAAK4M,GACNA,MACP5J,KAAIsN,IAAMnM,EAAY/D,MAAKmQ,GAAMA,IAAOD,KAAMA,GAAG7P,SAAQ,IACzE,MACY0D,EAAYjE,OAAO,EAAGiE,EAAYG,UAAW2L,EAAajN,KAAI1F,IAC1D,MAAMsP,EAAMyD,EAAU/S,GAEtB,OADA+O,EAAQmE,OAAO5D,GACRA,MACP5J,KAAIsN,GAAKA,EAAE7P,WAEtB,GA2EL,SAASgQ,EAASC,EAASC,GACvB,KAAMA,EAAU5J,MAAMwI,qBAAqB3R,GAAU,OAAO8S,EAC5D,IAAI9P,EAAQ+P,EAAU5J,MAAMwI,UAC5B,MAAM3C,EAAM9O,MAAMD,QAAQ+C,EAAM5C,OAAS,IAAIkR,iBAAqBwB,EAKlE,GAJAC,EAAU/D,IAAMA,EAChBgE,EAAehE,GACX9O,MAAMD,QAAQ+C,EAAM5C,QAAQ4O,EAAIpB,OAAOkF,KAErCA,aAAmBG,MAAO,MAAM,IAAI7P,MAAM,0CAChD,KAAM0P,EAAQI,qBAAqBlR,UAAW,MAAM,IAAIoB,MAAM,4CAE9D,IAAImD,EAAc,GAIlB,OAFAsL,EAAalD,OAAM,IAtFvB,SAA2B3L,EAAO8P,EAAS9D,EAAKzI,GAC5C,MAAMS,EAAShE,EAAMpB,UAAS,CAACyQ,EAAczR,GAAmB4C,UAASpD,WAAUmE,MAG/E,GAFA3D,aAA2BuQ,MAAQkB,IAAiBzR,GAAmBA,EAAgBiC,SAAQ,GAE3FwP,aAAwBlB,KACxB5K,EAAYjE,OAAO,EAAGiE,EAAYG,QAAQtB,KAAImH,GAAMA,aAAc4E,MAAQ5E,EAAG1J,YAC7EiQ,EAAQlJ,KAAO,GACfiI,EAAaK,MAAK,IAAMY,EAAQnE,MAAM0D,KACtC9L,EAAYnE,KAAKiQ,QAGjB,GADAS,EAAQlJ,KAAOyI,EACXnS,MAAMD,QAAQoS,GAAe,CAC7BS,EAAQlJ,KAAO,GACf,MAAM3G,EAAO,CAACoP,EAAczR,EAAiB,IAAK2D,EAAQf,UAASpD,QAAOmG,cAAakI,QAASqE,IAChGjB,EAAalD,OAAM,KACXyD,EAAY5O,aAAoBxB,SAChCoQ,EAAY5O,MAAYP,GAExBmP,EAAYlP,OAAOD,EACtB,GAErB,MAAmB,GAAIoP,aAAwBzF,EAAa,CAC5CkG,EAAQlJ,KAAO,GAGfrD,EAAYjE,OAAO,EAAGiE,EAAYG,QAAQtB,KAAImH,GAAMA,aAAc4E,MAAQ5E,EAAG1J,YAE7E,MAAM0J,EAAKkG,EAAUJ,GACrB9L,EAAYnE,KAAKmK,GACjBA,EAAG2G,WAAU,IAAM3M,EAAYG,QAAUM,MACzC,IAAImM,GAAW,EACf,MAAMC,EAAW,CAACC,EAAOC,EAAUC,GAAW,OACtCJ,GAAaI,MACbF,EAAM3E,aACN2E,EAAM1E,MAAM2E,GACZH,GAAW,GACJ,GAKTK,EAAY,KAEd,GADAJ,EAASN,EAASvG,IACb4G,EAAU,OAAOhB,oBAAoBqB,EAAS,EAEvDrB,oBAAoBqB,GACpBV,EAAQlE,aAAa6E,IACjB,GAAIA,aAAatC,MAAQ2B,EAAQpE,aAAe+E,EAE5C,OADAA,EAAE7F,OAAOkF,GACFM,EAASN,EAASvG,GAAI,GAEjC6G,EAASN,EAASvG,EAAG,GAEzC,MAAmB,GAA2B,iBAAhB8F,EACd,IACIS,EAAQlJ,KAAO8J,KAAKC,UAAUtB,EAAc,KAAM,GACnC,CAAjB,MAAOuB,GAAU,CAG3B,MAAO,CAACjR,GAAU,KACdmQ,EAAQlJ,KAAO,GACfrD,EAAYnB,KAAI4J,GAAOA,EAAInM,QAAQF,KAC/B/B,aAA2BuQ,MAC3BvQ,EAAgBiC,UAEhBF,IACAmQ,EAAQ9L,SACRhE,EAAMH,SAAQ,GACjB,CACJ,IACF,GACHmM,EAAIkE,UAAUlM,EAClB,CAc6B6M,CAAkB7Q,EAAO8P,EAAS9D,EAAKzI,KAEzDyI,CACX,CAEO,SAASgE,EAAehE,GAC3B,KAAMA,aAAemC,MAAO,MAAM,IAAI/N,MAAM,qCAC5C,GAAI4L,EAAInM,mBAAmBb,SAAU,OAGrC,IAAInB,GAAc,EACdiT,EAAc,GAClB,MAAOC,EAASC,GAAiBjK,EAAS,CAAED,wBAAwB,KAC7D8E,EAAaqF,GAAqBlK,EAAS,CAAED,wBAAwB,IAC5E,IAAIoK,GAAU,EACdH,GAAQ,IAAMG,GAAU,IACxB,MAAM3C,EAAY,IAAIvC,EAAI1B,YACpBmB,EAAU,IAAIwE,KACd1F,EAAO,IAAI0F,KAUjB1R,OAAO4S,iBAAiBnF,EAAK,CACzBJ,YAAe,CACX1K,IAAK,IAAM0K,EACX1L,IAAKwB,GAAOkK,EAAYlK,IAE5BqP,QAAW,CACP7P,IAAK,IAAM6P,EACX7Q,IAAKwB,GAAOqP,EAAQrP,IAExBwP,QAAW,CACPhQ,IAAK,IAAMgQ,GAEfF,cAAiB,CACb9P,IAAK,IAAM8P,GAEfC,kBAAqB,CACjB/P,IAAK,IAAM+P,GAEfG,MAAS,CAAE,EACXvT,YAAa,CACTqD,IAAG,IAAYrD,GAEnBwT,QAAS,CACLnQ,IAAG,IAAYrD,GAEnBiT,YAAe,CAAE5P,IAAG,IAAY,IAAI4P,IACpCZ,UAAa,CACT9S,MAAQ6B,IACJ,GAAIA,aAAoBjC,GAAWiC,EAAS7B,iBAAiB4B,SAAU,CACnE,MAAMgB,EAAQf,EACdA,EAAW,IAAIgB,KACX,KAAMD,EAAM5C,iBAAiB4B,UAAW,MAAM,IAAIoB,MAAM,sCACxDJ,EAAM5C,SAAS6C,EAAK,CAE3B,MAAM,GAAI/C,MAAMD,QAAQgC,GAErB,YADAA,EAASmD,KAAI3C,GAAMuM,EAAIkE,UAAUzQ,KAGhCR,aAAoBD,UACrB8R,EAAY1R,KAAKH,EACpB,EAELqS,UAAU,GAEdzR,QAAW,CACPzC,MAAO,CAACuC,GAAU,KACVqM,aAAemC,QAAUnC,aAAesC,mBACxCtC,EAAIhI,SAEJnG,IACJmO,EAAI8E,YAAY1O,KAAI3C,GAAMA,EAAGE,KAC7B9B,GAAc,EACdiT,EAAc,GACV9E,aAAeiE,MAAQtQ,IACvBqM,EAAIpF,KAAO,IAEfoF,EAAIuC,UAAUnM,KAAImH,GAAIA,aAAc4E,MAAM5E,EAAG1J,YAAU,EAE3DyR,UAAU,GAEdxS,UAAa,CACToC,IAAG,IAAY8K,EAAIkE,UACnBhQ,IAAI9C,GAAS4O,EAAIkE,UAAU9S,EAAQ,GAEvCmR,UAAa,CACTrN,IAAG,IAAYqN,EACfrO,IAAI9C,GACAA,EAAQF,MAAMD,QAAQG,GAASA,EAAQ,CAACA,GACxCmR,EAAUnP,QAAQhC,EACrB,GAELoO,YAAa,CACTpO,MAjFY,IAAMuE,QAAQsN,UAAUrM,MAAK,KACzCoJ,EAAIN,YACJM,EAAIL,MAAMF,GACVO,EAAIL,MAAMpB,IACHA,EAAKmB,YACZnB,EAAKoB,MAAMF,GAERA,KA2EH6F,UAAU,GAEd7F,QAAS,CACLvK,IAAG,IAAYuK,KAIvBO,EAAIJ,aAAY,KACRI,EAAIN,YACJM,EAAIL,MAAMpB,EACb,GAET,CAEA,MAAMgH,EAAoB,CAAC,QAAS,QAe7B,SAASC,EAAOC,EAASC,EAAYC,SAASC,MAEjD,GADsB,iBAAZF,IAAsBA,EAAUC,SAASE,cAAcH,MAC3DA,aAAqBvD,MAAO,MAAM,IAAI/N,MAAM,oCAClD,IAAI0R,EACJ,MAAMC,EAdV,SAAuBL,GACnB,KAAMA,aAAqBvD,MAAO,MAAM,IAAI/N,MAAM,oCAClD,MAAM2R,EAAS,IAAI9B,KAAK,IAMxB,OALIyB,EAAUM,WACVN,EAAUM,WAAWpH,OAAOmH,GAE5BL,EAAU9G,OAAOmH,GAEdA,CACX,CAKmBE,CAAcP,GAC7B,SAASQ,EAAYlG,GACjB,GAAI9O,MAAMD,QAAQ+O,GAEd,OADA8F,EAAY9F,EAAI5J,KAAIiM,GAASmD,EAAOnD,EAAOqD,KACpCI,EAEX9B,EAAehE,GACfgE,EAAe0B,GACfA,EAAUxB,UAAUlE,EAAInM,SAEpBkS,EAAOpG,MAAMK,GACT0F,aAAqBpD,mBAAkBoD,EAAUnD,UAAYvC,GACjEA,EAAIiF,kBAAkBS,GAG1BK,EAAO/N,SACP8N,EAAY9F,CACf,CAQD,GA3CmB,EAACyF,EAASC,MACzBH,EAAkBpH,SAAS7M,OAAOmU,GAAS/O,MAAMyP,kBACjDZ,EAAkBpH,SAASuH,EAAUtH,iBAAzC,EAyCIgI,CAAeX,EAASC,GAAY,CAEpCQ,EADYzC,EAAUgC,GAEzB,CACD,OAXAY,iBACI,GAAIP,EAAW,OAAOA,EACtB,KAAMJ,aAAqBvD,MAAO,MAAM,IAAI/N,MAAM,2CAGlD,OADA8R,QADkBrD,EAAalD,OAAM,IAAM8D,EAAUgC,MAE9CK,CACV,CAKMQ,EACX,CAEO,SAAS7C,EAAU8C,GACtB,GAAIA,aAAiB3I,GAAe2I,EAAMvG,eAAemC,KACrD,MAAM,IAAI/N,MAAM,4FAEpB,GAAIlD,MAAMD,QAAQsV,GAEd,OAAOA,EAAMC,KAAKC,KAAUrQ,KAAIiM,GAASoB,EAAUpB,KAC9CkE,aAAiBvT,SACtBuT,EAAM,IAAInE,EAAemE,EAAM,CAAC7H,SAAS,KACjC6H,aAAiBG,aAAkBH,aAAiB3I,IAC5D2I,EAAQ,IAAI9D,EAAY8D,IAE5B,MAAMvG,EApjBV,SAAuBuG,GACnB,MAAMI,EAAeC,GAAOA,EAAKJ,KAAKC,KAAUrQ,KAAIiM,GAASoB,EAAUpB,KACvE,GAAIkE,aAAiBpE,KAAM,OAAOoE,EAClC,GAAIA,aAAiB3I,GAAe2I,EAAMvG,eAAemC,KAAM,OAAOoE,EAAMvG,IAC5E,GAAIuG,aAAiB/D,EACjB,OAAOmE,EAAcJ,EAAMpM,MAAMuE,UAErC,GAAI6H,aAAiB9D,EACjB,OAAIvR,MAAMD,QAAQsV,EAAMpM,MAAMwI,WACnBgE,EAAcJ,EAAMpM,MAAMwI,WAE9B4D,EAAMpM,MAAMwI,qBAAqBR,KAAOoE,EAAMpM,MAAMwI,UAAY,IAAIsB,KAAKsC,EAAMpM,MAAMwI,WAEhG,GAAI4D,aAAiBnE,EAAgB,CACjC,GAAImE,EAAMnJ,WAAWmJ,EAAM7P,gBAAiB1D,SAAU,CAClD,MAAM6T,EAAYN,EAAMnJ,WAAWmJ,EAAM7P,MACzC6P,EAAM7P,KAAOmQ,CAChB,CACD,GAAIN,EAAM7P,gBAAgB1D,SAAU,CAChC,IAAImH,EAAQoM,EAAMpM,MAGlB,MAFsC,iBAA3BoM,EAAM7P,KAAKoQ,eAA0B3M,EAAQ,IAAKoM,EAAM7P,KAAKoQ,gBAAiB3M,IAElFsJ,EADI8C,EAAM7P,KAAKyD,GAEzB,CACD,OAAOwL,SAASoB,cAAcR,EAAM7P,KACvC,CACD,GAAIxF,MAAMD,QAAQsV,GACd,OAAOI,EAAcJ,GAEzB,GAAIA,aAAiBvT,SAAU,CAC3B,IAAImH,EAAQ,CAAEuE,SAAU,IAExB,MADiC,iBAAtB6H,EAAMO,eAA0B3M,EAAQ,IAAKoM,EAAMO,aAAcpI,SAAU,KAC/E+E,EAAU8C,EAAMpM,GAC1B,CACD,GAAIoM,aAAiBvV,EACjB,OAAOyS,EAAU,IAAIhB,EAAY8D,EAAO,IAAIrK,IAEhD,IACI,OAAO,IAAI+H,KAAKS,KAAKC,UAAU4B,GAGlC,CAFC,MAAO3B,GACL,OAAO,IAAIX,KAAKsC,EACnB,CACL,CA0gBgBQ,CAAcR,GACtBA,aAAiB3I,GAAeoC,aAAemC,QAAQnC,EAAIuG,iBAAiB3I,IAC5ErL,OAAO0C,eAAe+K,EAAK,QAAS,CAChC9K,IAAK,IAAMqR,IAgCnB,GAAIrV,MAAMD,QAAQ+O,GAAM,CACpB,GAAIuG,EAAMvE,kBAAkBpE,EACxB,OAAOoC,EAEX,MAAMgH,EAAM,IAAI1E,iBAIhB,OAHA0B,EAAegD,GACfA,EAAIzE,UAAYvC,EAChBgH,EAAIpI,UAAUoB,GACPgH,CACV,CACD,MAvCoB,CAACC,IAEjB,GADAjD,EAAeiD,GACXV,aAAiBpE,KAAM,OAAO8E,EAClC,GAAIV,aAAiB9D,GAAezR,EAAQH,QAAQ0V,EAAMpM,MAAMwI,WAAY,OAAOkB,EAASoD,EAAUV,GACtG,GAAIA,GAASA,EAAM7P,gBAAgB1D,SAAU,OAAOiU,EACpD,MAAMC,EAAU,GAChB,GAAIX,aAAiB3I,EAAa,CAE9B,GADA2I,EAAMvG,IAAMiH,GACPV,EAAMpM,MAAMuE,SAAU,OAAOuI,EAClCC,EAAQ9T,QAAQmT,EAAMpM,MAAMuE,SAAS8H,KAAKC,KAAUrQ,KAAIiM,IACrB,iBAApBkE,EAAMnJ,aACbW,QAAQC,KAAK,wCACbuI,EAAMnJ,WAAa,CAAE,GAErBiF,aAAiBzE,IACjByE,EAAML,OAASuE,EACfhU,OAAO6C,OAAOiN,EAAMxE,WAAY0I,EAAM1I,YACtCwE,EAAMjF,WAAamJ,EAAMnJ,YAEtBoI,EAAOnD,EAAO4E,MAE5B,CAMD,OALAtR,QAAQwR,IAAID,GACPtQ,MAAM8H,KAtiBnB,SAAmBsB,EAAKuG,GACpB,KAAMvG,aAAemC,MAAO,MAAM,IAAI/N,MAAM,iCAC5C,KAAM4L,aAAeoH,aAAc,OAAO,KAC1C,GAAIb,GAASA,EAAM7P,gBAAgB1D,SAAU,OAAO,KACpD,KAAMuT,aAAiBnE,GAAiB,OAAO,KAC/C,MAAMiF,EAAa,CAAE,EACfC,EAAc,CAAE,EAEhBC,EAAkB,CAACpN,GAAQqD,EAAUC,GAAYuC,EAAKwH,EAAgB,MACxE,MAAM1I,EAAe,CAAC1N,EAAOqW,EAAQzH,EAAK0H,EAAQlK,KAC9C,IAAI,QAAQ6D,KAAKqG,GAAjB,CACA,GAAGD,aAAiBE,mBAAmB,CAAC,YAAaxJ,SAASuJ,GAC1DD,EAAMG,UAAS,MAEnB,IAAI,CAAC,WAAY,UAAUzJ,SAASuJ,GAGhC,OAAOD,EAAMC,GAAmB,KAAVtW,GAAsBA,EACzC,GAAKsW,KAASD,GAAW,CAAC,SAAU,YAAYtJ,gBAAgB/M,GACnE,MAAoB,iBAATA,GAA4C,iBAAhBqW,EAAMC,GAA2BnV,OAAO6C,OAAOqS,EAAMC,GAAQtW,GAC7FqW,EAAMC,GAAStW,CACzB,CACDqW,EAAM3I,aAAa4I,EAAOtW,EAZD,CAYO,EAE9ByW,EAAU,CAACtK,EAAIC,EAAUC,KAC3B,MAAMtH,EAAU,GAEhB,OADAoR,EAAgBpN,EAAO,CAACqD,EAAUC,GAAYF,EAAIpH,GAC3C,IAAM0M,GAAa,IAAM1M,EAAQC,KAAI3C,GAAMA,aAAcT,UAAYS,OAAW,EAErFqU,EAAgB,CAAC/R,EAAQgS,KAC3B,MAAMC,EAAe5W,IACbA,aAAiBJ,EACjBgP,EAAIlN,UAAY1B,EAAMwB,UAAS,CAAC8C,EAAKuS,KACjClS,EAAOL,EAAKuS,GACL,IAAM7W,EAAMyC,aACpB,GAEHkC,EAAO3E,EACV,EAEDF,MAAMD,QAAQwM,GACdA,EAAUrH,KAAIV,GAAOsS,EAAYtS,KAEjCsS,EAAYvK,GAEhBuC,EAAIlN,UAAY,IAAMiV,aAAoB/U,UAAY+U,GAAU,EAE9DG,EAAU,IAAM,KACtB,IACIC,EADApJ,EAAUmJ,EAEd,MAAME,EAAU3K,EAEV4K,EAAM,kBAAkBrL,KAAKQ,GAEnC,GADI6K,IAAO7K,EAAW6K,EAAI,IACV,YAAZ7K,KAA4B+I,aAAiBnE,GAAiB,OAAOjI,EACzE,GAAuB,iBAAZqD,EAAsB,OAAOrD,EAExC,GAAIqD,IAAaA,EAASjD,WAAW,OAASiD,EAASjD,WAAW,MAAO,CAErE,IAAI7D,EAAO8G,EAASrJ,MAAMqJ,EAASjD,WAAW,MAAQ,EAAI,GAAG4L,cACzDzP,EAAKsK,QAAQ,MAAQ,IACrBtK,EAAOA,EAAKvC,MAAM,EAAGuC,EAAKsK,QAAQ,OAEtC,MAAMsH,EAAgB,CAAC7U,EAAIQ,EAAO,MAC1BR,aAAczC,IACdyC,EAAKA,EAAG5B,YAAc,IAAM,KAAO4B,EAAGrC,OAEnCqC,KAAMQ,IAEXhB,EAAW,IAAIgB,KACjB,GAAI/C,MAAMD,QAAQwM,GACd,OAAOA,EAAUrH,KAAI3C,GAAM6U,EAAc7U,EAAIQ,KAEjDqU,EAAc7K,EAAWxJ,EAAK,EAElC,IAAIsU,EAAW,IAAMvI,EAAIS,oBAAoB/J,EAAMzD,GAKnD,OAHA+M,EAAIkE,UAAUqE,GACdvI,EAAIQ,iBAAiB9J,EAAMzD,GAC3B8L,EAAU,IAAMwJ,EACTpO,CACV,CAAM,GAAmB,KAAfqD,EAAS,GAAW,CAC3B,MAAM1I,EAAWkL,EAAIxC,EAASrJ,MAAM,IAGpC,OAFA6L,EAAIxC,EAASrJ,MAAM,IAAMsJ,EACzBsB,EAAU,IAAMiB,EAAIxC,EAASrJ,MAAM,IAAMW,EAClCqF,CACV,CAAM,GAAIgO,EAAY,2HAA2HnL,KAAKQ,GAAW,CAC9J,MAAMwB,KAAEA,EAAItK,IAAEA,EAAGiJ,UAAEA,GAAcwK,EAAUhL,OAE3C,GADAmK,EAAYtI,GAAQA,KAAQsI,EAAcA,EAAYtI,GAAQ,EAAI,EAC9DuH,EAAM1I,WAAWmB,aAAiBhM,SAAU,CAC5C,IAAIkE,EAAQoQ,EAAYtI,IACG,CAAC,QACQb,SAASa,GAAQ6D,EAAeA,EAAalD,QACxE,KACA0H,EAAWrI,KAAOqI,EAAWrI,GAAQ,CAAE,GAC5C,MAAMwJ,EAAMjC,EAAM1I,WAAWmB,GAAM,CAC/BF,aAAc+I,EACdR,aACAzM,KAAMyM,EAAWrI,GACjBzB,GAAIyC,EAAKxC,WAAUC,YACnBvG,MAAOA,EAAQuR,OAAOvR,GAAS,EAC/BwG,cAAesB,EAAMtK,MACrBiJ,UAAWA,GAAWrB,MAAM,KAAKlC,QAAO,CAACQ,EAAM8N,KAAY9N,EAAK8N,IAAS,EAAa9N,IAAQ,CAAE,IAAK,CAAE,IAEvG4N,aAAexV,WACfgN,EAAIkE,UAAUsE,GACdzJ,EAAUyJ,EACVhB,EAAcpU,KAAK2L,GACtB,GAER,CACD,OAAO5E,CACnB,CAAe,GAAI,CAAC,QAAS,SAAS,YAAYgE,SAAS6B,EAAI5B,YAAc,CAAC,QAAS,WAAWD,SAASX,IAAc4K,aAAmBpX,EAAU,CACtI,CAAC,UAAUmN,SAAS6B,EAAI5B,YAAY4B,aAAe2H,oBACnD3H,EAAI5O,MAAMgX,EAAQhX,MAClB4O,EAAI+E,SAAQ,KACR/E,EAAI2I,eAAe,EACnB,IAAIpV,GAAG,EACP,IAAK,IAAIqV,KAAO5I,EACZzM,IACGqV,EAAIxX,QAAQgX,EAAQhX,QACnB4O,EAAI2I,cAAcpV,EAEzB,KAIT,MAAMiV,EAAO9E,GAAMb,EAAalD,OAAM,IAE9B,CAAC,YAAYxB,SAASuF,EAAEmF,OAAOnS,MACxB0R,EAAQlU,IAAIwP,EAAEmF,OAAOC,SAEzBV,EAAQlU,IAAIwP,EAAEmF,OAAOrL,MAEhCwC,EAAIQ,iBAAiB,QAASgI,GAC9BzJ,EAAQ,KACJiB,EAAIS,oBAAoB,QAAS+H,GACjCxI,EAAI5O,MAAM,EAAE,EAEhB4O,EAAIkE,UAAUnF,EAC1B,KAAe,IAAgB,SAAZvB,GAAuB,cAAc6D,KAAK7D,GAAW,CAC5D,MAAMuL,EAAe/I,EAAIgJ,MAAMC,QACzBC,EAAa9X,GAAUyR,EAAalD,OAAM,KACxCvO,aAAiBmB,OACjBA,OAAO6C,OAAO4K,EAAIgJ,MAAO5X,GAEzB4O,EAAIgJ,MAAMC,SAAW7X,CACxB,IAGL,OADA0W,EAAcoB,GAAW,IAAMA,EAAUH,KAClC5O,CACnB,CAAe,GAAgB,SAAZqD,GAAuB,gBAAgB6D,KAAK7D,GAAW,CAC9D,MAAMuL,EAAe/I,EAAIK,aAAa,SAEhC8I,EAAY,CAAC/X,EAAO0D,IAAa+N,EAAalD,OAAM,KACtD,MAAMyJ,EAAYC,GAAW/X,OAAO+X,GAAQ/M,MAAM,KAAKlG,KAAIV,GAAOA,GAAOsK,EAAIsJ,UAAUzU,IAAIa,KACrF6T,EAAeF,GAAW/X,OAAO+X,GAAQ/M,MAAM,KAAKlG,KAAIV,GAAOA,GAAOsK,EAAIsJ,UAAUtR,OAAOtC,KACjGxE,MAAMD,QAAQ6D,GAAYA,EAASsB,KAAIV,GAAO6T,EAAY7T,KAAQ6T,EAAYzU,GAC9E5D,MAAMD,QAAQG,GAASA,EAAMgF,KAAIV,GAAO0T,EAAS1T,KAAQ0T,EAAShY,EAAM,IAG5E,OADA0W,EAAcqB,GAAW,IAAMA,EAAUJ,KAClC5O,CACV,CAAM,GAAIqD,GAAYA,EAASjD,WAAW,KAAM,CAE7C,GADAiD,EAAW,mBAAmB6D,KAAK7D,GAAYA,EAASrJ,MAAM,EAAGqJ,EAASwD,QAAQ,MAAQxD,GACrFC,EAAW,OAAOtD,EACvB,IAAIqP,EACJ,MAAMC,EAAcrY,IAChB,MAAMsY,EAAahZ,GAAMmX,EAAQ7H,EAAKxC,EAASrJ,MAAM,GAAIzD,GACzD,GAAwB,iBAAb+M,EAkBP,OAAOiM,EAAUtY,GAlBa,CAC9B,MAAMuY,KAAEA,EAAMvY,MAAOsE,GAAQtE,EAC7B,GAAIuY,aAAgB3Y,EAAS,CACzB,IAAI4Y,EACJ,OAAOD,EAAK/W,UAAUyM,IACdA,EACKuK,IAAMA,EAAOF,EAAUhU,aAAe1E,EAAU0E,EAAIR,MAAQQ,KAE7DkU,GAAMA,IACVA,EAAO,MAEJ,IAAMA,GAAQA,OACtB,EAC3B,CAEwB,GAAID,EAAM,OAAOD,EAAUhU,EAEnD,CAEiB,EAED+H,aAAqBzM,IAGrBwY,EAAUC,EAAWhM,IAGzB,MAAM+K,EAAM,IAAMgB,IAMlB,OALIhB,aAAexV,WACfgN,EAAIkE,UAAUsE,GACdzJ,EAAUyJ,EACVhB,EAAcpU,KAAK2L,IAEhB5E,CACV,EACD,GAAIsD,aAAqBzM,EAAS,CAC9B,MAAMgD,EAAQyJ,EACRoM,EAAQ7V,EAAMpB,UAASlC,IACzBoO,EAAapO,GACN,KACHsD,EAAMH,SAAQ,GACdmM,EAAI8J,gBAAgBtM,EAAS,KAGrCwC,EAAIkE,UAAU2F,GACdpM,EAAYA,EAAUrM,MACtBoW,EAAcpU,KAAKyW,EACtB,CASD,OAPA/K,EAAarB,GACTsB,IAAYmJ,IACZnJ,EAAU,KACNiB,EAAI8J,gBAAgBtM,EAAS,GAGrCgK,EAAcpU,KAAK2L,GACZ5E,GAEX5H,OAAOiE,QAAQ+P,EAAMpM,OAAOC,QAAO,CAACD,GAAQqD,EAAUC,KAAe8J,EAAgBpN,EAAO,CAACqD,EAAUC,GAAYuC,IAAM,GAC7H,CAoUgBW,CAAUsG,EAAUV,GACpB1D,EAAalD,OAAM,IAAMsH,EAASjC,cAAciC,EAAUvI,IAAU,IAErEuI,GAYJ8C,CAAY/J,EACvB,CC5mBO,MAAMgK,EAAe,CAAC,OAAQ,OAAQ,KAAM,MAAO,QAAS,KAAM,MAAO,QAAS,SAAU,OAAQ,OAAQ,QAAS,SAAU,QAAS,OAClIC,EAAe,CAAC,IAAK,OAAQ,UAAW,OAAQ,UAAW,QAAS,QAAS,IAAK,OAAQ,MAAO,MAAO,aAAc,OAAQ,KAAM,SAAU,SAAU,UAAW,OAAQ,OAAQ,MAAO,WAAY,OAAQ,WAAY,KAAM,MAAO,UAAW,MAAO,SAAU,MAAO,MAAO,KAAM,KAAM,KAAM,QAAS,WAAY,aAAc,SAAU,OAAQ,SAAU,OAAQ,QAAS,WAAY,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAAQ,SAAU,SAAU,KAAM,OAAQ,IAAK,SAAU,MAAO,QAAS,MAAO,MAAO,QAAS,SAAU,KAAM,OAAQ,OAAQ,MAAO,OAAQ,UAAW,OAAQ,OAAQ,QAAS,MAAO,WAAY,SAAU,KAAM,WAAY,SAAU,SAAU,IAAK,QAAS,UAAW,MAAO,WAAY,IAAK,KAAM,KAAM,OAAQ,IAAK,OAAQ,SAAU,UAAW,SAAU,OAAQ,QAAS,SAAU,OAAQ,SAAU,QAAS,MAAO,UAAW,MAAO,QAAS,QAAS,KAAM,WAAY,WAAY,QAAS,KAAM,QAAS,OAAQ,QAAS,KAAM,QAAS,IAAK,KAAM,MAAO,QAAS,OAI59BC,EAAoB,yOACpBC,EAA2B,0QAE3BC,EAA0B,kCAC1BC,EAAmB,oCAGnBC,EAAyB,8DACzBC,EAAuBhP,EAAuB8O,EAAkB,UAAW,WAG3EG,EAA6B,8DAC7BC,EAA2BlP,EAAuB8O,EAAkB,UAAW,WAG/EK,EAA0B,8DAC1BC,EAAwBpP,EAAuB8O,EAAkB,UAAW,WAG5EO,EAA8B,uEAI9BC,EAAa5O,EACtBsO,EACAE,EACAE,EANqCpP,EAAuB8O,EAAkB,UAlBhD,oBA0B9B,OAQG,SAASS,EAAUC,GACtB,MAAMhO,EAASoN,EAAyBnN,KAAK+N,GAC7C,OAAKhO,GACEA,EAAOI,OAAO6N,aADD,IAExB,CAeO,SAASC,EAAgBC,GAG5B,MAAM9Z,EAAQ,CAACyQ,EAAM7C,EAAM5N,KACvB,MAAM+Z,EAAY,CAACzV,EAAMtE,EAAOga,EAAQpM,KACpC,GAAI6C,EAAKuJ,GAAQ,CACb,IAAI7X,EAAIvB,KAAKiP,MAAsB,IAAhBjP,KAAKC,UACxB,KAAQmZ,EAAQ,IAAI7X,OAASsO,GAAQtO,IAErC,OADAsO,EAAKuJ,EAAQ,IAAI7X,MAAQmC,EAClBmM,EAAKuJ,EACf,CACD,OAAO1V,GAEX,OAAIsJ,EAAKzE,WAAW,MAAMyE,EAAKzE,WAAW,OAAO,CAAC,QAAQ,SAAS4D,SAASa,IAExD,mHAAmHhC,KAAKgC,GADjImM,IAIJ/T,MAAMhG,GAASA,EAAQqX,OAAOrX,EAAK,EAE9C,OAAO8Z,EAAW5O,MAAMuO,GAAYzQ,QAAO,CAACyH,EAAMtF,KAC9C,GAAI,QAAQ8E,KAAK9E,GAAS,OAAOsF,EACjC,IAAI9E,EAYJ,OAXIA,EAASuN,EAAuBtN,KAAKT,MAE9BQ,EAASyN,EAA2BxN,KAAKT,MAEzCQ,EAAS2N,EAAwB1N,KAAKT,MAEtCQ,EAAS6N,EAA4B5N,KAAKT,IALjDsF,EAAK9E,EAAOI,OAAOK,UAAYpM,EAAMyQ,EAAM9E,EAAOI,OAAOK,SAAUT,EAAOI,OAAOM,YAO1EV,EAASqN,EAAwBpN,KAAKT,MAC7CsF,EAAK9E,EAAOI,OAAOK,UAAY,IAE5BqE,IACR,GACP,CACO,SAASwJ,EAAaN,GACzB,MAAMhO,EAASoN,EAAyBnN,KAAK+N,GAC7C,IAAKhO,EAAQ,OAAO,KACpB,MAAMrG,KAAEA,EAAImL,KAAEA,EAAIyJ,YAAEA,EAAWN,aAAEA,GAAiBjO,EAAOI,OACzD,MAAO,CACCoO,iBACA,OAAOvB,EAAa7L,SAAShN,KAAKuF,KACrC,EACG8U,iBACA,OAAOvB,EAAa9L,SAAShN,KAAKuF,KACrC,EACDA,OACAmL,OACAyJ,cACAN,eACAD,UACA5Q,MAAO8Q,EAAgBlO,EAAOI,OAAO0E,MACrC4J,SAASC,GACL,KAAMA,aAAkBxP,GAAc,MAAM,IAAI9H,MAAM,qCACtD,MAAMuX,EAAczP,EAAYS,MAAMxL,KAAKuF,KAAMgV,GACjD,GAAIC,GAA2C,GAA5BA,EAAYva,MAAMsG,QAA8C,KAA/BiU,EAAYva,MAAM,GAAG0P,IAAI,IAAa6K,EAAYva,MAAM,aAAc4B,SAItH,OAHA7B,KAAKuF,KAAOiV,EAAYva,MAAM,GAAG+C,MAAM,GAAI,GAC3CuX,EAAOtO,WAAWjM,KAAKuF,MAAQiV,EAAYva,MAAM,GAE1CD,KAAKuF,KAEhB,IAAIA,EAAOwF,EAAYI,MAAMnL,KAAKuF,QAAUQ,WAAYwU,EAAOxU,KAS/D,OARAR,EAAuB,IAAhBA,EAAKgB,OAAehB,EAAK,GAAKA,EAAKwG,KAAK,IAC5B,iBAARxG,GAAmC,mBAARA,IAClCA,SAAiBA,EAAV,2BAMJvF,KAAKuF,KAAOA,CACtB,EAET,CCtIA,SAASkV,EAASC,EAAWC,EAAmBC,GAC5C,KAAOD,EAAkBpU,QAAQ,CAC7B,MAAMgL,EAAOoJ,EAAkBzT,QAC/B,IAAI,QAAQgJ,KAAKqB,GACjB,GAAIoI,EAAUpI,GAAO,CACjB,MAAM6D,EAAQ8E,EAAa3I,GAC3B6D,EAAM7H,SAAW,GACjB6H,EAAMkF,SAASM,GDmIArV,EClIC6P,EAAM7P,KDmIvBsT,EAAa7L,SAASzH,GAAMyP,kBCnIKI,EAAM+E,aAClCU,EAAYzF,EAAOuF,EAAmBC,GAE1C,MAAMxO,EAAK,IAAI6E,EAAemE,EAAM7P,KAAM,IAAK6P,EAAMpM,MAAOuE,SAAU6H,EAAM7H,UAAYqN,GACxFF,EAAUzY,KAAKmK,EAC3B,KAAe,CACH,MAAM0O,EAAQvJ,EAAKpG,MAAML,EAAkBC,EAAYC,OAAQ,eAC3D,QAAQkF,KAAK4K,EAAM,KAAKA,EAAM5T,QAC9B,QAAQgJ,KAAK4K,EAAMnL,IAAI,KAAKmL,EAAM7T,MACtCyT,EAAUzY,QAAQ6Y,EAAM7V,KAAI8V,IACxB,MAAM1R,EAAqB,iBAAL0R,EAAiBhQ,EAAYS,MAAMuP,EAAGH,GAAeG,EAE3E,GAAgB,iBADhBA,EAAI1R,EAAQA,EAAMpJ,MAAM,GAAK8a,GACH,OAAOA,EACjC,MAAMC,EAAaC,GAAM,qBAAqB/K,KAAK+K,GACnD,OAAID,EAAUD,GACHA,EAAE5P,MAAM,wBAAwBlG,KAAI8V,GAAIC,EAAUD,GAAKvG,SAAS0G,cAAc,yBAAyBrP,KAAKkP,GAAG,IAAKA,IAAGzT,QAAOyT,GAAKA,IAEvI,IAAIzJ,EAAYyJ,EAAGH,EAAW,IAE5C,CACJ,CD8GE,IAAoBrV,EC7GvB,OAAOmV,CACX,CACA,SAASG,EAAYzF,EAAOuF,EAAmBC,GAC3C,GAAIxF,EAAM7P,gBAAgB1D,WAAauT,EAAM7P,KAAKsI,KAAM,OACxD,IAAIsN,EAAQ,EACZ,MAAMpV,EAAQ4U,EAAkB3U,WAAUuM,IACtC,MAAM6I,EAAMlB,EAAa3H,GACnB8I,EAAQtQ,EAAYS,MAAM4P,EAAMA,EAAI7V,KAAOgN,EAAGqI,GACpD,SAAIQ,IAASC,GAASA,EAAMpb,MAAM,KAAOmV,EAAM7P,MAAU6V,EAAI7V,OAAS6P,EAAM7P,QACxE4V,EAAQC,EAAIvB,aAAesB,EAAQ,EAAIA,EAAQ,EAC3CC,EAAIvB,cAAgBsB,GAAS,GAE9B,IAQX,IANe,IAAXpV,EACAqP,EAAM7H,SAAWoN,EAAkBxY,OAAO,EAAGwY,EAAkBpU,QAAQe,QAAOiL,IAAM,QAAQrC,KAAKqC,MAEjG6C,EAAM7H,SAAWoN,EAAkBxY,OAAO,EAAG4D,EAAQ,GAAGuB,QAAOiL,IAAM,QAAQrC,KAAKqC,KAClF6C,EAAM7H,SAAStG,OAED,UAAdmO,EAAM7P,KAAkB,CACxB,IAAI+V,EAAYlG,EAAM7H,SAASxB,KAAK,IACpC,MAAMmL,EAAMnM,EAAYS,MAAM8P,EAAWV,GACrC1D,IACAoE,EAAYpE,EAAIpL,aAEpBsJ,EAAM7H,SAAW,CAAC,IAAIuF,KAAKwI,GACnC,MACQlG,EAAM7H,SAAWkN,EAAS,GAAIrF,EAAM7H,SAAUqN,EAEtD,CAQA,SAASW,EAAgBC,EAAYjB,GACjC,KAAMA,aAAkBxP,GAAc,MAAM,IAAI9H,MAAM,qCACtD,MAAMwY,EDlCH,SAA8BD,GACjC,OAAOA,EAAWrQ,MAAM4N,EAC5B,CCgCsB2C,CAAqBF,GACjCG,EAAOlB,EAAS,GAAIgB,EAAWlB,GACrC,GAAmB,GAAfoB,EAAKpV,OAAa,CAClB,MAAM6F,EAAKuP,EAAK,GAChB,OAAOvP,aAAcK,EAAcL,EAAK,IAAIkF,EAAYlF,EAAImO,EAC/D,CAED,OADa,IAAIlJ,EAAgBsK,EAAMpB,EAE3C,CAEO,SAASqB,EAASC,KAAYlQ,GACjC,IAAImQ,EACkB,iBAAXnQ,EAAK,KAA2C,IAAzBA,EAAK,GAAG,eACtCmQ,EAASnQ,EAAK,GACdA,EAAK,GAAK,IAEd,MAAOoQ,GAzBX,SAAeF,KAAYtB,GACvB,MAAO,CAAC,IAAIA,EAAOtR,QAAO,CAACwM,EAAMuG,EAAMjW,KACnC0P,EAAKxT,KAAK4Z,EAAQ9V,GAAQ,qBAAqBA,iBAAqBwU,EAAOxU,YACpE0P,IACR,IAAKoG,EAAQtB,EAAOhU,SAASwF,KAAK,IAAKwO,EAC9C,CAoByB/O,CAAMqQ,KAAYlQ,GAEjCsQ,EAASV,EAAgBQ,EADhB,IAAIhR,KAAeY,IAMlC,OAJImQ,IACIA,EAAO7P,YAA0C,iBAArB6P,EAAO7P,aAAwBgQ,EAAOhQ,WAAa6P,EAAO7P,YACtF6P,EAAOpP,YAA0C,iBAArBoP,EAAOpP,aAAwBuP,EAAOvP,WAAaoP,EAAOpP,aAEvFuP,CACX,CCrFO,SAASN,KAAQ7Y,GACpB,OAAOwP,EAAUsJ,KAAY9Y,GACjC,CACA,MAAM4O,EAAe,CAAC5P,EAAUgB,EAAM6O,IAAU7P,EAAS8P,MAAMD,EAAO7O,GACtE4O,EAAalD,MAAQ,CAAC1M,EAAUgB,EAAM6O,IAAUnN,QAAQsN,UAAUrM,MAAK,IAAM3D,EAAS8P,MAAMD,EAAO7O,KACnG4O,EAAaK,KAAO,CAACjQ,EAAUgB,EAAM6O,IAAUK,qBAAoB,IAAMlQ,EAAS8P,MAAMD,EAAO7O,KAE/F,MAAMoZ,GAAW,WACXC,GAAc,OACb,SAASC,GAAY7W,EAAMyD,KAAUuE,GACxC,MAAM5B,EAAO,IAAI0Q,4BAGjB,OAFArT,EAAQA,GAAS,CAAEuE,SAAU,IAC7BA,EAAWA,EAAStI,KAAIiM,GAASA,aAAiBoL,WAAapL,EAAQ,IAAIqL,WAAWrL,EAAOvF,KACzFpG,GAAQ2W,GACD,IAAIM,eAAejP,EAAU5B,GAEpCpG,GAAQ4W,GACD,IAAII,WAAWhP,EAAU5B,GAE7B,IAAI8Q,cAAclX,EAAM,IAAKyD,EAAOuE,YAAY5B,EAC3D,QACAyQ,GAAYF,SAAWA,GACvBE,GAAYtJ,KAAOqJ,GA8CnBR,EAAK1W,IA1CL,SAAapC,EAAOf,GAChB,MAAM2T,EAAK5S,aAAiBhD,EAAQ,IAAKgD,EAAW,OAAGA,EACvD,IAAKA,EAAMiC,GAAUC,EAASlC,GAAOtD,IACjCkW,EAAKtT,OAAO,EAAEsT,EAAKlP,UAAUhH,GACtBkW,KAGX,MAAMnV,EAAc,CAACf,EAAG6C,IAAM,CAAC2C,EAASxF,GAAG,GAAIwF,EAAS3C,GAAG,IACrD8D,EAAW3G,GAAMuC,KAAYvC,EAAGsD,GAAO5C,IACzC,MAAO2H,EAAK7B,GAAOxG,EACnB,OAAOuF,EAASkC,KAAKjB,EAAM9F,EAAK,IAE9BkG,EAAYtD,EAAM5C,MAAMgF,IAAI3E,GAClC,IAAI8F,EAAcsL,EAAalD,OAAM,IAAIrI,EAAUlB,IAAIiB,KACvD,MAAOG,EAAOC,GAAYvB,EAASqB,GA0BnC,OAzBAC,EAAM5E,UAASgU,GAAM/D,EAAalD,OAAM,KACpC,KAAGiH,aAAgBjR,SACfiR,EAAK9N,OAAMC,GAAMA,aAAgBoJ,QACjC,MAAM,IAAI/N,MAAM,kDACnB,MACF,GAKHJ,EAAMpB,UAAU8C,IACZ,GAAI4B,EAAUI,OAAShC,EAAIgC,OAAQ,CAC/B,MAAMC,EAAajC,EAAIgC,OACjBE,EAAMN,EAAUI,OACtBJ,EAAUhE,OAAOqE,EAAYC,GAAKxB,KAAIyB,GAAKA,EAAEzB,KAAI7C,GAAKA,EAAEM,SAAQ,OAChE4D,EAASnE,OAAOqE,EAAYC,EAC/B,MAAM,GAAIN,EAAUI,OAAShC,EAAIgC,OAAQ,CACtC,MAAMC,EAAaL,EAAUI,OAC7BJ,EAAUlE,QAAQsC,EAAIvB,MAAMwD,GAAYvB,IAAI3E,IAC5C6F,EAAUlB,KAAI,GAAIc,GAAQ3D,IAAM2D,EAAMhD,IAAIX,KAC1CkE,EAASrE,QAAQkE,EAAUnD,MAAMwD,GAAYvB,IAAIiB,GACpD,CAfgBC,EAAUlB,KAAI,EAAE1F,EAAG6C,GAAI2D,IAAU2L,EAAalD,OAAM,KAChEpM,EAAE1B,aAAa0B,EAAEW,IAAIgD,GACrBxG,EAAEmB,aAAanB,EAAEwD,IAAIF,EAAM5C,MAAM8F,GAAO,KAcrC,IAGLM,CACX,iIC9EO,SAAmBvE,EAAUsC,EAAS,CAAEuR,aAAc,CAAE,IAC3D,GAAkB,iBAARvR,EAAkB,MAAM,IAAInB,MAAM,uCAC5C,MAAM0S,EAAavR,EAAOuR,cAAc,CAAE,EAC1C,GAAwB,iBAAdA,EAAwB,MAAM,IAAI1S,MAAM,oDAClD,MAAMX,EAAI0G,GAAUlH,EAASiH,EAAS,IAAI4M,KAAgB3M,KAE1D,OADA1G,EAAGqT,aAAaA,EACTrT,CACX,0CCLO,SAAgBoa,EAASC,EAAgBvY,EAAS,CAAEuR,aAAc,CAAE,EAAEd,WAAY,OACrF,MAAM+H,EAAgB,IAAMxY,EAAOuR,cAAgB,CAAE,GAC/C7L,EAAS,CAAE,EACX+S,EAAe,cAAc5G,YAC/B1U,GAAMV,KAAKC,SACAgc,gCAAuB,OAAO1b,OAAO+N,KAAKyN,EAAgB,CACrEG,yBAAyBlP,EAAMmP,EAAMC,GAC7BlY,EAASrF,QAAQM,KAAKgJ,MAAM6E,KAAU7N,KAAKgJ,MAAM6E,GAAM3N,YAAc+c,GAAyC,iBAA1Bjd,KAAKgJ,MAAM6E,GAAM5N,OACrGD,KAAKgJ,MAAM6E,GAAM9K,IAAIka,EAE5B,CACDrZ,YAAYoF,GACRA,EAAwB,iBAATA,EAAoBA,EAAQ,CAAEuE,SAAU,IACvD1J,QACAgP,EAAe7S,OAEfgJ,EAAQD,EAAS,IAAK6T,KAAkB5T,KAClCuE,SAAStL,QAAQ,IAAIjC,KAAKmN,YAAYlI,KAAIgW,IAC5CA,EAAEpU,SACFgM,EAAeoI,GACRA,MAEXjb,KAAKgJ,MAAQA,EACb5H,OAAOiE,QAAQ2D,GAAO/D,KAAI,EAAEoH,EAAUC,MAClB,YAAZD,GAA0BA,EAASjD,WAAW,OAClDpJ,KAAK2B,UAAY2K,EAAU7K,UAAU8C,IACjC,GAAkB,iBAAPA,EAEP,OADAC,QAAQsN,UAAUrM,MAAK,IAAMzF,KAAK2N,aAAatB,EAAUC,EAAUpM,cAC5D,IAAMF,KAAK2Y,gBAAgBtM,GAEtCrM,KAAK2Y,gBAAgBtM,EAAS,IAC/B,GAAK,IAEZ,MAAMe,EAAOhJ,EAAOyQ,YAAc7U,KAAKqN,aAAa,CAChDC,KAAM,WAAalJ,EAAOyQ,YAAYvH,KAAO,SAAW,OACxD4P,iBAAkB9Y,EAAOyQ,YAAYqI,eACrCC,eAAgB,WAEpBrT,EAAO9J,MAAKuB,GAAO,CACf6b,kBAAmBxT,IACnByT,qBAAsBzT,IACtB0T,gBAAiB1T,IACjBjI,UAAW,CAAC3B,KAAK2B,WACjB4b,QAAS3T,EAAS,CACdF,YAAcpH,GACH,IAAIiB,KACP,MAAMia,EAAKlb,EAAGiB,GACVia,aAAc3b,UACd7B,KAAK2B,UAAU6b,EAClB,KAKjB,MAAMC,EAAarc,OAAOC,OAAO,CAC7B+L,OAAMhB,GAAIpM,QACPoB,OAAOiE,QAAQyE,EAAO9J,MAAKuB,IAAM0H,QAAO,CAACyU,GAAKzV,EAAG1I,MAChDme,EAAGzV,GAAK1I,EAAE,GACHme,IACR,MAEDnQ,EAAW+E,EAAUqK,EAAe3T,EAAOyU,KAC/BrQ,GAAQpN,MAChByN,OAAOF,GACNvN,KAAK6T,cAAc7T,KAAMuN,GACpCzD,EAAO9J,MAAKuB,GAAKgc,QAAQ,GAAGvd,KAAMuN,EACrC,CACD6P,qBAAqB7Z,GAAOuG,EAAO9J,MAAKuB,GAAK6b,kBAAkB,MAAM7Z,EAAM,CAC3E8Z,wBAAwB9Z,GAAOuG,EAAO9J,MAAKuB,GAAK8b,qBAAqB,MAAM9Z,EAAM,CACjF+Z,mBAAmB/Z,GAAOuG,EAAO9J,MAAKuB,GAAK+b,gBAAgB,MAAM/Z,EAAM,GAI3E,OADAoa,eAAeC,OAAOlB,EAASG,EAAc,CAAEgB,QAASzZ,EAAOyZ,UACvD7U,GAAU,IAAI6T,EAAa,CAACtP,SAAS,MAAMvE,GACvD,kEC5EO,SAAmBlH,EAAUmI,EAAS,IACzC,IAAKlK,MAAMD,QAAQmK,GAAS,MAAM,IAAIhH,MAAM,8BAC5C,MAAMiH,EAAU,GAChB,IAAIrD,EACJ,MAAMsB,EAAQ,IAAI8B,GACZE,EAAWzD,GAAKA,aAAa7G,EAAU6G,EAAEzG,MAAQyG,EAQvD,OANAyB,EAAM1F,SAAQ,CAACyC,EAAI9C,KACX8C,aAAcrF,GACdqK,EAAQjI,KAAKiD,EAAGzD,UAAS,KAHpBW,KAAIoC,QAAQsN,UAAUrM,MAAK,IAAMoB,EAAS/E,EAAS,IAAIqG,EAAMlD,IAAIkF,IAAW/H,IAAG,EAGpDwC,CAAOxC,EAAE,IAC5C,IAEL4P,qBAAoB,IAAMnL,EAAS/E,EAAS,IAAIqG,EAAMlD,IAAIkF,KAAY,KAC/D,KACHD,EAAQ/H,OAAO,EAAE+H,EAAQ3D,QAAQtB,KAAI3C,GAAMA,QACvCuE,aAAkBhF,UAAUgF,GAAQ,EAAG,IAAIsB,GAAOlD,IAAIkF,GAAU,CAE5E,iCCjBO,SAAyBrI,EAAUmI,EAAS,IAC/C,IAAKlK,MAAMD,QAAQmK,GAAS,MAAM,IAAIhH,MAAM,8BAC5C,MAAMiH,EAAU,GAChB,IAAIrD,EACJ,MAAMsB,EAAQ,IAAI8B,GACZE,EAAWzD,GAAKA,aAAa7G,EAAU6G,EAAEzG,MAAQyG,EACjD9B,EAAOxC,GAAIyE,EAAS/E,EAAS,IAAIqG,EAAMlD,IAAIkF,IAAW/H,GAO5D,OANA+F,EAAM1F,SAAQ,CAACyC,EAAI9C,KACX8C,aAAcrF,GACdqK,EAAQjI,KAAKiD,EAAGzD,UAAS,KAAOmD,EAAOxC,EAAE,IAC5C,IAELwC,GAAQ,GACD,KACHsF,EAAQ/H,OAAO,EAAE+H,EAAQ3D,QAAQtB,KAAI3C,GAAMA,QACvCuE,aAAkBhF,UAAUgF,GAAQ,EAAG,IAAIsB,GAAOlD,IAAIkF,GAAU,CAE5E"}